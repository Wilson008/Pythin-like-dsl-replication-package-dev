/*
 * generated by Xtext 2.25.0
 */
package org.xtext.demo.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRootAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHardwarecomponentKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cHardwarecomponentAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cHardwarecomponentHardwareComponentParserRuleCall_3_2_0 = (RuleCall)cHardwarecomponentAssignment_3_2.eContents().get(0);
		private final Assignment cHardwarecomponentAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cHardwarecomponentHardwareComponentParserRuleCall_3_3_0 = (RuleCall)cHardwarecomponentAssignment_3_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSoftwarecomponentAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSoftwarecomponentSoftwareComponentParserRuleCall_4_0_0 = (RuleCall)cSoftwarecomponentAssignment_4_0.eContents().get(0);
		private final Assignment cSoftwarecomponentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSoftwarecomponentSoftwareComponentParserRuleCall_4_1_0 = (RuleCall)cSoftwarecomponentAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Root returns Root:
		//    {Root}
		//    'Root'
		//    BEGIN
		//        ('hardwarecomponent' BEGIN hardwarecomponent+=HardwareComponent ( hardwarecomponent+=HardwareComponent)* END)?
		//        (softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Root}
		//'Root'
		//BEGIN
		//    ('hardwarecomponent' BEGIN hardwarecomponent+=HardwareComponent ( hardwarecomponent+=HardwareComponent)* END)?
		//    (softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Root}
		public Action getRootAction_0() { return cRootAction_0; }
		
		//'Root'
		public Keyword getRootKeyword_1() { return cRootKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//('hardwarecomponent' BEGIN hardwarecomponent+=HardwareComponent ( hardwarecomponent+=HardwareComponent)* END)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'hardwarecomponent'
		public Keyword getHardwarecomponentKeyword_3_0() { return cHardwarecomponentKeyword_3_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3_1() { return cBEGINTerminalRuleCall_3_1; }
		
		//hardwarecomponent+=HardwareComponent
		public Assignment getHardwarecomponentAssignment_3_2() { return cHardwarecomponentAssignment_3_2; }
		
		//HardwareComponent
		public RuleCall getHardwarecomponentHardwareComponentParserRuleCall_3_2_0() { return cHardwarecomponentHardwareComponentParserRuleCall_3_2_0; }
		
		//( hardwarecomponent+=HardwareComponent)*
		public Assignment getHardwarecomponentAssignment_3_3() { return cHardwarecomponentAssignment_3_3; }
		
		//HardwareComponent
		public RuleCall getHardwarecomponentHardwareComponentParserRuleCall_3_3_0() { return cHardwarecomponentHardwareComponentParserRuleCall_3_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3_4() { return cENDTerminalRuleCall_3_4; }
		
		//(softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//softwarecomponent+=SoftwareComponent
		public Assignment getSoftwarecomponentAssignment_4_0() { return cSoftwarecomponentAssignment_4_0; }
		
		//SoftwareComponent
		public RuleCall getSoftwarecomponentSoftwareComponentParserRuleCall_4_0_0() { return cSoftwarecomponentSoftwareComponentParserRuleCall_4_0_0; }
		
		//( softwarecomponent+=SoftwareComponent)*
		public Assignment getSoftwarecomponentAssignment_4_1() { return cSoftwarecomponentAssignment_4_1; }
		
		//SoftwareComponent
		public RuleCall getSoftwarecomponentSoftwareComponentParserRuleCall_4_1_0() { return cSoftwarecomponentSoftwareComponentParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class HardwareComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.HardwareComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActuatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//HardwareComponent returns HardwareComponent:
		//    Node | Sensor | Actuator ;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Sensor | Actuator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_1() { return cSensorParserRuleCall_1; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_2() { return cActuatorParserRuleCall_2; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPowerPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Port returns Port:
		//    PowerPort | FunctionPort ;
		@Override public ParserRule getRule() { return rule; }
		
		//PowerPort | FunctionPort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PowerPort
		public RuleCall getPowerPortParserRuleCall_0() { return cPowerPortParserRuleCall_0; }
		
		//FunctionPort
		public RuleCall getFunctionPortParserRuleCall_1() { return cFunctionPortParserRuleCall_1; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.Connector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPortConnectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupConnectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Connector returns Connector:
		//    PortConnector | GroupConnector;
		@Override public ParserRule getRule() { return rule; }
		
		//PortConnector | GroupConnector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PortConnector
		public RuleCall getPortConnectorParserRuleCall_0() { return cPortConnectorParserRuleCall_0; }
		
		//GroupConnector
		public RuleCall getGroupConnectorParserRuleCall_1() { return cGroupConnectorParserRuleCall_1; }
	}
	public class SoftwareComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.SoftwareComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoftwareComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSoftwarecomponentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierEStringParserRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUUIDKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUUIDAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUUIDEStringParserRuleCall_4_1_0 = (RuleCall)cUUIDAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAllocatedToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAllocatedToAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cAllocatedToNodeCrossReference_5_1_0 = (CrossReference)cAllocatedToAssignment_5_1.eContents().get(0);
		private final RuleCall cAllocatedToNodeEStringParserRuleCall_5_1_0_1 = (RuleCall)cAllocatedToNodeCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cPortAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_6_0_0 = (RuleCall)cPortAssignment_6_0.eContents().get(0);
		private final Assignment cPortAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPortPortParserRuleCall_6_1_0 = (RuleCall)cPortAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cPortgroupAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cPortgroupPortGroupParserRuleCall_7_0_0 = (RuleCall)cPortgroupAssignment_7_0.eContents().get(0);
		private final Assignment cPortgroupAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPortgroupPortGroupParserRuleCall_7_1_0 = (RuleCall)cPortgroupAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cConnectorAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cConnectorConnectorParserRuleCall_8_0_0 = (RuleCall)cConnectorAssignment_8_0.eContents().get(0);
		private final Assignment cConnectorAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cConnectorConnectorParserRuleCall_8_1_0 = (RuleCall)cConnectorAssignment_8_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//SoftwareComponent returns SoftwareComponent:
		//    {SoftwareComponent}
		//    'softwarecomponent' (identifier=EString)?
		//    BEGIN
		//        ('UUID' UUID=EString)?
		//        ('allocatedTo' allocatedTo=[Node|EString])?
		//        (port+=Port (  port+=Port)*)?
		//        (portgroup+=PortGroup ( portgroup+=PortGroup)*)?
		//        (connector+=Connector ( connector+=Connector)*)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{SoftwareComponent}
		//'softwarecomponent' (identifier=EString)?
		//BEGIN
		//    ('UUID' UUID=EString)?
		//    ('allocatedTo' allocatedTo=[Node|EString])?
		//    (port+=Port (  port+=Port)*)?
		//    (portgroup+=PortGroup ( portgroup+=PortGroup)*)?
		//    (connector+=Connector ( connector+=Connector)*)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{SoftwareComponent}
		public Action getSoftwareComponentAction_0() { return cSoftwareComponentAction_0; }
		
		//'softwarecomponent'
		public Keyword getSoftwarecomponentKeyword_1() { return cSoftwarecomponentKeyword_1; }
		
		//(identifier=EString)?
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//EString
		public RuleCall getIdentifierEStringParserRuleCall_2_0() { return cIdentifierEStringParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//('UUID' UUID=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'UUID'
		public Keyword getUUIDKeyword_4_0() { return cUUIDKeyword_4_0; }
		
		//UUID=EString
		public Assignment getUUIDAssignment_4_1() { return cUUIDAssignment_4_1; }
		
		//EString
		public RuleCall getUUIDEStringParserRuleCall_4_1_0() { return cUUIDEStringParserRuleCall_4_1_0; }
		
		//('allocatedTo' allocatedTo=[Node|EString])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'allocatedTo'
		public Keyword getAllocatedToKeyword_5_0() { return cAllocatedToKeyword_5_0; }
		
		//allocatedTo=[Node|EString]
		public Assignment getAllocatedToAssignment_5_1() { return cAllocatedToAssignment_5_1; }
		
		//[Node|EString]
		public CrossReference getAllocatedToNodeCrossReference_5_1_0() { return cAllocatedToNodeCrossReference_5_1_0; }
		
		//EString
		public RuleCall getAllocatedToNodeEStringParserRuleCall_5_1_0_1() { return cAllocatedToNodeEStringParserRuleCall_5_1_0_1; }
		
		//(port+=Port (  port+=Port)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//port+=Port
		public Assignment getPortAssignment_6_0() { return cPortAssignment_6_0; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_6_0_0() { return cPortPortParserRuleCall_6_0_0; }
		
		//(  port+=Port)*
		public Assignment getPortAssignment_6_1() { return cPortAssignment_6_1; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_6_1_0() { return cPortPortParserRuleCall_6_1_0; }
		
		//(portgroup+=PortGroup ( portgroup+=PortGroup)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//portgroup+=PortGroup
		public Assignment getPortgroupAssignment_7_0() { return cPortgroupAssignment_7_0; }
		
		//PortGroup
		public RuleCall getPortgroupPortGroupParserRuleCall_7_0_0() { return cPortgroupPortGroupParserRuleCall_7_0_0; }
		
		//( portgroup+=PortGroup)*
		public Assignment getPortgroupAssignment_7_1() { return cPortgroupAssignment_7_1; }
		
		//PortGroup
		public RuleCall getPortgroupPortGroupParserRuleCall_7_1_0() { return cPortgroupPortGroupParserRuleCall_7_1_0; }
		
		//(connector+=Connector ( connector+=Connector)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//connector+=Connector
		public Assignment getConnectorAssignment_8_0() { return cConnectorAssignment_8_0; }
		
		//Connector
		public RuleCall getConnectorConnectorParserRuleCall_8_0_0() { return cConnectorConnectorParserRuleCall_8_0_0; }
		
		//( connector+=Connector)*
		public Assignment getConnectorAssignment_8_1() { return cConnectorAssignment_8_1; }
		
		//Connector
		public RuleCall getConnectorConnectorParserRuleCall_8_1_0() { return cConnectorConnectorParserRuleCall_8_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierEStringParserRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUUIDKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUUIDAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUUIDEStringParserRuleCall_4_1_0 = (RuleCall)cUUIDAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cSoftwarecomponentAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cSoftwarecomponentSoftwareComponentParserRuleCall_5_0_0 = (RuleCall)cSoftwarecomponentAssignment_5_0.eContents().get(0);
		private final Assignment cSoftwarecomponentAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSoftwarecomponentSoftwareComponentParserRuleCall_5_1_0 = (RuleCall)cSoftwarecomponentAssignment_5_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Node returns Node:
		//    {Node}
		//    'Node' identifier=EString
		//    BEGIN
		//        ('UUID' UUID=EString)?
		//        (softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Node}
		//'Node' identifier=EString
		//BEGIN
		//    ('UUID' UUID=EString)?
		//    (softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Node}
		public Action getNodeAction_0() { return cNodeAction_0; }
		
		//'Node'
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }
		
		//identifier=EString
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//EString
		public RuleCall getIdentifierEStringParserRuleCall_2_0() { return cIdentifierEStringParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//('UUID' UUID=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'UUID'
		public Keyword getUUIDKeyword_4_0() { return cUUIDKeyword_4_0; }
		
		//UUID=EString
		public Assignment getUUIDAssignment_4_1() { return cUUIDAssignment_4_1; }
		
		//EString
		public RuleCall getUUIDEStringParserRuleCall_4_1_0() { return cUUIDEStringParserRuleCall_4_1_0; }
		
		//(softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//softwarecomponent+=SoftwareComponent
		public Assignment getSoftwarecomponentAssignment_5_0() { return cSoftwarecomponentAssignment_5_0; }
		
		//SoftwareComponent
		public RuleCall getSoftwarecomponentSoftwareComponentParserRuleCall_5_0_0() { return cSoftwarecomponentSoftwareComponentParserRuleCall_5_0_0; }
		
		//( softwarecomponent+=SoftwareComponent)*
		public Assignment getSoftwarecomponentAssignment_5_1() { return cSoftwarecomponentAssignment_5_1; }
		
		//SoftwareComponent
		public RuleCall getSoftwarecomponentSoftwareComponentParserRuleCall_5_1_0() { return cSoftwarecomponentSoftwareComponentParserRuleCall_5_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierEStringParserRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUUIDKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUUIDAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUUIDEStringParserRuleCall_4_1_0 = (RuleCall)cUUIDAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Sensor returns Sensor:
		//    {Sensor}
		//    'Sensor' identifier=EString
		//    BEGIN
		//        ('UUID' UUID=EString)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor}
		//'Sensor' identifier=EString
		//BEGIN
		//    ('UUID' UUID=EString)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//'Sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
		
		//identifier=EString
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//EString
		public RuleCall getIdentifierEStringParserRuleCall_2_0() { return cIdentifierEStringParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//('UUID' UUID=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'UUID'
		public Keyword getUUIDKeyword_4_0() { return cUUIDKeyword_4_0; }
		
		//UUID=EString
		public Assignment getUUIDAssignment_4_1() { return cUUIDAssignment_4_1; }
		
		//EString
		public RuleCall getUUIDEStringParserRuleCall_4_1_0() { return cUUIDEStringParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActuatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActuatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierEStringParserRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUUIDKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUUIDAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUUIDEStringParserRuleCall_4_1_0 = (RuleCall)cUUIDAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Actuator returns Actuator:
		//    {Actuator}
		//    'Actuator' identifier=EString
		//    BEGIN
		//        ('UUID' UUID=EString)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Actuator}
		//'Actuator' identifier=EString
		//BEGIN
		//    ('UUID' UUID=EString)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Actuator}
		public Action getActuatorAction_0() { return cActuatorAction_0; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_1() { return cActuatorKeyword_1; }
		
		//identifier=EString
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//EString
		public RuleCall getIdentifierEStringParserRuleCall_2_0() { return cIdentifierEStringParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//('UUID' UUID=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'UUID'
		public Keyword getUUIDKeyword_4_0() { return cUUIDKeyword_4_0; }
		
		//UUID=EString
		public Assignment getUUIDAssignment_4_1() { return cUUIDAssignment_4_1; }
		
		//EString
		public RuleCall getUUIDEStringParserRuleCall_4_1_0() { return cUUIDEStringParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class PortGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.PortGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortPortParserRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		private final Assignment cPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortPortParserRuleCall_4_0 = (RuleCall)cPortAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//PortGroup returns PortGroup:
		//    'PortGroup' name=EString
		//    BEGIN
		//        port+=Port ( port+=Port)*
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//'PortGroup' name=EString
		//BEGIN
		//    port+=Port ( port+=Port)*
		//END
		public Group getGroup() { return cGroup; }
		
		//'PortGroup'
		public Keyword getPortGroupKeyword_0() { return cPortGroupKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//port+=Port
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_3_0() { return cPortPortParserRuleCall_3_0; }
		
		//( port+=Port)*
		public Assignment getPortAssignment_4() { return cPortAssignment_4; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_4_0() { return cPortPortParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class PowerPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.PowerPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPowerPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPowerPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInputVoltageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputVoltageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInputVoltageEIntParserRuleCall_4_1_0 = (RuleCall)cInputVoltageAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//PowerPort returns PowerPort:
		//    {PowerPort}
		//    'PowerPort' name=EString
		//    BEGIN
		//        ('inputVoltage' inputVoltage=EInt)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{PowerPort}
		//'PowerPort' name=EString
		//BEGIN
		//    ('inputVoltage' inputVoltage=EInt)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{PowerPort}
		public Action getPowerPortAction_0() { return cPowerPortAction_0; }
		
		//'PowerPort'
		public Keyword getPowerPortKeyword_1() { return cPowerPortKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//('inputVoltage' inputVoltage=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'inputVoltage'
		public Keyword getInputVoltageKeyword_4_0() { return cInputVoltageKeyword_4_0; }
		
		//inputVoltage=EInt
		public Assignment getInputVoltageAssignment_4_1() { return cInputVoltageAssignment_4_1; }
		
		//EInt
		public RuleCall getInputVoltageEIntParserRuleCall_4_1_0() { return cInputVoltageEIntParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class FunctionPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.FunctionPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDirectionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDirectionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDirectionPortDirectionEnumRuleCall_4_1_0 = (RuleCall)cDirectionAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//FunctionPort returns FunctionPort:
		//    {FunctionPort}
		//    'FunctionPort' name=EString
		//    BEGIN
		//        ('direction' direction=PortDirection)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionPort}
		//'FunctionPort' name=EString
		//BEGIN
		//    ('direction' direction=PortDirection)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{FunctionPort}
		public Action getFunctionPortAction_0() { return cFunctionPortAction_0; }
		
		//'FunctionPort'
		public Keyword getFunctionPortKeyword_1() { return cFunctionPortKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//('direction' direction=PortDirection)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'direction'
		public Keyword getDirectionKeyword_4_0() { return cDirectionKeyword_4_0; }
		
		//direction=PortDirection
		public Assignment getDirectionAssignment_4_1() { return cDirectionAssignment_4_1; }
		
		//PortDirection
		public RuleCall getDirectionPortDirectionEnumRuleCall_4_1_0() { return cDirectionPortDirectionEnumRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class PortConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.PortConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortPortParserRuleCall_2_0 = (RuleCall)cPortAssignment_2.eContents().get(0);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortPortParserRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//PortConnector returns PortConnector:
		//    'PortConnector'
		//    BEGIN
		//        port+=Port ( port+=Port)*
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//'PortConnector'
		//BEGIN
		//    port+=Port ( port+=Port)*
		//END
		public Group getGroup() { return cGroup; }
		
		//'PortConnector'
		public Keyword getPortConnectorKeyword_0() { return cPortConnectorKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//port+=Port
		public Assignment getPortAssignment_2() { return cPortAssignment_2; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_2_0() { return cPortPortParserRuleCall_2_0; }
		
		//( port+=Port)*
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_3_0() { return cPortPortParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class GroupConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.GroupConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPortgroupAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortgroupPortGroupParserRuleCall_2_0 = (RuleCall)cPortgroupAssignment_2.eContents().get(0);
		private final Assignment cPortgroupAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortgroupPortGroupParserRuleCall_3_0 = (RuleCall)cPortgroupAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//GroupConnector returns GroupConnector:
		//    'GroupConnector'
		//    BEGIN
		//        portgroup+=PortGroup (  portgroup+=PortGroup)*
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//'GroupConnector'
		//BEGIN
		//    portgroup+=PortGroup (  portgroup+=PortGroup)*
		//END
		public Group getGroup() { return cGroup; }
		
		//'GroupConnector'
		public Keyword getGroupConnectorKeyword_0() { return cGroupConnectorKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//portgroup+=PortGroup
		public Assignment getPortgroupAssignment_2() { return cPortgroupAssignment_2; }
		
		//PortGroup
		public RuleCall getPortgroupPortGroupParserRuleCall_2_0() { return cPortgroupPortGroupParserRuleCall_2_0; }
		
		//(  portgroup+=PortGroup)*
		public Assignment getPortgroupAssignment_3() { return cPortgroupAssignment_3; }
		
		//PortGroup
		public RuleCall getPortgroupPortGroupParserRuleCall_3_0() { return cPortgroupPortGroupParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// 4. inherits expressions from Xbase and redefines the syntax of block expressions
		//@Override
		//XBlockExpression returns xbase::XExpression:
		//    {xbase::XBlockExpression}
		//    BEGIN
		//        (expressions+=XExpressionOrVarDeclaration ';'?)*
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{xbase::XBlockExpression}
		//BEGIN
		//    (expressions+=XExpressionOrVarDeclaration ';'?)*
		//END
		public Group getGroup() { return cGroup; }
		
		//{xbase::XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//(expressions+=XExpressionOrVarDeclaration ';'?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//expressions+=XExpressionOrVarDeclaration
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }
		
		//XExpressionOrVarDeclaration
		public RuleCall getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0() { return cExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	
	public class PortDirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.PortDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInoutInoutKeyword_2_0 = (Keyword)cInoutEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PortDirection returns PortDirection:
		//                in = 'in' | out = 'out' | inout = 'inout';
		public EnumRule getRule() { return rule; }
		
		//in = 'in' | out = 'out' | inout = 'inout'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in = 'in'
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out = 'out'
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
		
		//inout = 'inout'
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_2() { return cInoutEnumLiteralDeclaration_2; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_2_0() { return cInoutInoutKeyword_2_0; }
	}
	
	private final RootElements pRoot;
	private final HardwareComponentElements pHardwareComponent;
	private final PortElements pPort;
	private final ConnectorElements pConnector;
	private final SoftwareComponentElements pSoftwareComponent;
	private final EStringElements pEString;
	private final NodeElements pNode;
	private final SensorElements pSensor;
	private final ActuatorElements pActuator;
	private final PortGroupElements pPortGroup;
	private final PowerPortElements pPowerPort;
	private final FunctionPortElements pFunctionPort;
	private final EIntElements pEInt;
	private final PortDirectionElements ePortDirection;
	private final PortConnectorElements pPortConnector;
	private final GroupConnectorElements pGroupConnector;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final XBlockExpressionElements pXBlockExpression;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pRoot = new RootElements();
		this.pHardwareComponent = new HardwareComponentElements();
		this.pPort = new PortElements();
		this.pConnector = new ConnectorElements();
		this.pSoftwareComponent = new SoftwareComponentElements();
		this.pEString = new EStringElements();
		this.pNode = new NodeElements();
		this.pSensor = new SensorElements();
		this.pActuator = new ActuatorElements();
		this.pPortGroup = new PortGroupElements();
		this.pPowerPort = new PowerPortElements();
		this.pFunctionPort = new FunctionPortElements();
		this.pEInt = new EIntElements();
		this.ePortDirection = new PortDirectionElements();
		this.pPortConnector = new PortConnectorElements();
		this.pGroupConnector = new GroupConnectorElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.demo.mydsl.MyDsl.END");
		this.pXBlockExpression = new XBlockExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.demo.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Root returns Root:
	//    {Root}
	//    'Root'
	//    BEGIN
	//        ('hardwarecomponent' BEGIN hardwarecomponent+=HardwareComponent ( hardwarecomponent+=HardwareComponent)* END)?
	//        (softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
	//    END;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//HardwareComponent returns HardwareComponent:
	//    Node | Sensor | Actuator ;
	public HardwareComponentElements getHardwareComponentAccess() {
		return pHardwareComponent;
	}
	
	public ParserRule getHardwareComponentRule() {
		return getHardwareComponentAccess().getRule();
	}
	
	//Port returns Port:
	//    PowerPort | FunctionPort ;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Connector returns Connector:
	//    PortConnector | GroupConnector;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//SoftwareComponent returns SoftwareComponent:
	//    {SoftwareComponent}
	//    'softwarecomponent' (identifier=EString)?
	//    BEGIN
	//        ('UUID' UUID=EString)?
	//        ('allocatedTo' allocatedTo=[Node|EString])?
	//        (port+=Port (  port+=Port)*)?
	//        (portgroup+=PortGroup ( portgroup+=PortGroup)*)?
	//        (connector+=Connector ( connector+=Connector)*)?
	//    END;
	public SoftwareComponentElements getSoftwareComponentAccess() {
		return pSoftwareComponent;
	}
	
	public ParserRule getSoftwareComponentRule() {
		return getSoftwareComponentAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Node returns Node:
	//    {Node}
	//    'Node' identifier=EString
	//    BEGIN
	//        ('UUID' UUID=EString)?
	//        (softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
	//    END;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    {Sensor}
	//    'Sensor' identifier=EString
	//    BEGIN
	//        ('UUID' UUID=EString)?
	//    END;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actuator returns Actuator:
	//    {Actuator}
	//    'Actuator' identifier=EString
	//    BEGIN
	//        ('UUID' UUID=EString)?
	//    END;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//PortGroup returns PortGroup:
	//    'PortGroup' name=EString
	//    BEGIN
	//        port+=Port ( port+=Port)*
	//    END;
	public PortGroupElements getPortGroupAccess() {
		return pPortGroup;
	}
	
	public ParserRule getPortGroupRule() {
		return getPortGroupAccess().getRule();
	}
	
	//PowerPort returns PowerPort:
	//    {PowerPort}
	//    'PowerPort' name=EString
	//    BEGIN
	//        ('inputVoltage' inputVoltage=EInt)?
	//    END;
	public PowerPortElements getPowerPortAccess() {
		return pPowerPort;
	}
	
	public ParserRule getPowerPortRule() {
		return getPowerPortAccess().getRule();
	}
	
	//FunctionPort returns FunctionPort:
	//    {FunctionPort}
	//    'FunctionPort' name=EString
	//    BEGIN
	//        ('direction' direction=PortDirection)?
	//    END;
	public FunctionPortElements getFunctionPortAccess() {
		return pFunctionPort;
	}
	
	public ParserRule getFunctionPortRule() {
		return getFunctionPortAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum PortDirection returns PortDirection:
	//                in = 'in' | out = 'out' | inout = 'inout';
	public PortDirectionElements getPortDirectionAccess() {
		return ePortDirection;
	}
	
	public EnumRule getPortDirectionRule() {
		return getPortDirectionAccess().getRule();
	}
	
	//PortConnector returns PortConnector:
	//    'PortConnector'
	//    BEGIN
	//        port+=Port ( port+=Port)*
	//    END;
	public PortConnectorElements getPortConnectorAccess() {
		return pPortConnector;
	}
	
	public ParserRule getPortConnectorRule() {
		return getPortConnectorAccess().getRule();
	}
	
	//GroupConnector returns GroupConnector:
	//    'GroupConnector'
	//    BEGIN
	//        portgroup+=PortGroup (  portgroup+=PortGroup)*
	//    END;
	public GroupConnectorElements getGroupConnectorAccess() {
		return pGroupConnector;
	}
	
	public ParserRule getGroupConnectorRule() {
		return getGroupConnectorAccess().getRule();
	}
	
	//// 3. include whitespace-aware blocks in your language is to use synthetic tokens in the grammar
	////    by writing terminals of the form 'synthetic:<terminal name>'
	//terminal BEGIN: 'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END: 'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//// 4. inherits expressions from Xbase and redefines the syntax of block expressions
	//@Override
	//XBlockExpression returns xbase::XExpression:
	//    {xbase::XBlockExpression}
	//    BEGIN
	//        (expressions+=XExpressionOrVarDeclaration ';'?)*
	//    END;
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return pXBlockExpression;
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment returns XExpression :
	//    {XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |
	//    XOrExpression (
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//    "!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	//;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//            =>explicitOperationCall?='('
	//                (
	//                    memberCallArguments+=XShortClosure
	//                  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                )?
	//            ')')?
	//            memberCallArguments+=XClosure?
	//        )*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression returns XExpression:
	//    XConstructorCall |
	//    XBlockExpression |
	//    XSwitchExpression |
	//    XSynchronizedExpression |
	//    XFeatureCall |
	//    XLiteral |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XDoWhileExpression |
	//    XThrowExpression |
	//    XReturnExpression |
	//    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral returns XExpression:
	//    XCollectionLiteral |
	//    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    XTypeLiteral
	//;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XExpression
	//    (=>'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//    'do'
	//        body=XExpression
	//    'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//    featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XExpression)?
	//    |    'finally' finallyExpression=XExpression
	//    );
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ';'?
	//;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
