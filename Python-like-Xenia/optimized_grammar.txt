// automatically generated by Xtext
// 1. change the reference from Terminals to Xbase grammar
//grammar org.xtext.example.myxenia.MyXenia with org.eclipse.xtext.common.Terminals
grammar org.xtext.example.myxenia.MyXenia with org.eclipse.xtext.xbase.Xbase

// 2. Import Xbase to refer to EClassifiers from the Xbase model
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.foliage.com/xenia/Xenia" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model'
	BEGIN
		(headers+=Header (headers+=Header)*)?
		(entities+=Entity (entities+=Entity)*)?
		(mapped_entities+=MappedEntity (mapped_entities+=MappedEntity)*)?
	END;




SuperSite returns SuperSite:
	SuperSite_Impl | SiteWithModal | Site;






Header returns Header:
	{Header}
	'Header'
	BEGIN
		('appName' appName=EString)?
		(sites+=SuperSite (sites+=SuperSite)*)?
	END;

Entity returns Entity:
	{Entity}
	'Entity'
	BEGIN
		('tech' tech=EString)?
		('path' path=EString)?
		('mode' mode=Mode)?
	END;

MappedEntity returns MappedEntity:
	{MappedEntity}
	'MappedEntity'
	BEGIN
		(infoProps+=InfoProperty (infoProps+=InfoProperty)*)?
		(linkedProps+=LinkedProperty (linkedProps+=LinkedProperty)*)?
	END;

EString returns ecore::EString:
	STRING | ID;

SuperSite_Impl returns SuperSite:
	{SuperSite}
	'SuperSite'
	name=EString;

SiteWithModal returns SiteWithModal:
	{SiteWithModal}
	'SiteWithModal'
	name=EString
	BEGIN
		(sites+=SuperSite (sites+=SuperSite)*)?
	END;

Site returns Site:
	{Site}
	'Site'
	name=EString;

enum Mode returns Mode:
				DEV = 'DEV' | PROD = 'PROD';

InfoProperty returns InfoProperty:
	{InfoProperty}
	'InfoProperty'
	BEGIN
		('page' page=[Site|EString])?
		(entities+=InfoEntity (entities+=InfoEntity)*)?
	END;

LinkedProperty returns LinkedProperty:
	{LinkedProperty}
	'LinkedProperty'
	BEGIN
		('name' name=[Site|EString])?
		(page=RedirectPage)?
	END;

InfoEntity returns InfoEntity:
	{InfoEntity}
	'InfoEntity'
	BEGIN
		(entries+=InfoEntry (entries+=InfoEntry)*)?
		('infoValue' infoValue=EString)?
	END;

enum InfoEntry returns InfoEntry:
				MOD = 'MOD' | FREQ = 'FREQ' | PRIO = 'PRIO';

RedirectPage returns RedirectPage:
	{RedirectPage}
	'RedirectPage'
	BEGIN
		('site' '(' site+=[Site|EString] ( "," site+=[Site|EString])* ')' )?
	END;

// 3. include whitespace-aware blocks in your language is to use synthetic tokens in the grammar 
//    by writing terminals of the form 'synthetic:<terminal name>'
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

// 4. inherits expressions from Xbase and redefines the syntax of block expressions
@Override
XBlockExpression returns xbase::XExpression:
    {xbase::XBlockExpression}
    BEGIN
        (expressions+=XExpressionOrVarDeclaration ';'?)*
    END;