/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.myxenia.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MyXeniaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHeadersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cHeadersHeaderParserRuleCall_3_0_0 = (RuleCall)cHeadersAssignment_3_0.eContents().get(0);
		private final Assignment cHeadersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cHeadersHeaderParserRuleCall_3_1_0 = (RuleCall)cHeadersAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEntitiesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_4_0_0 = (RuleCall)cEntitiesAssignment_4_0.eContents().get(0);
		private final Assignment cEntitiesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_4_1_0 = (RuleCall)cEntitiesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cMapped_entitiesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cMapped_entitiesMappedEntityParserRuleCall_5_0_0 = (RuleCall)cMapped_entitiesAssignment_5_0.eContents().get(0);
		private final Assignment cMapped_entitiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMapped_entitiesMappedEntityParserRuleCall_5_1_0 = (RuleCall)cMapped_entitiesAssignment_5_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Model returns Model:
		//    {Model}
		//    'Model'
		//    BEGIN
		//        (headers+=Header (headers+=Header)*)?
		//        (entities+=Entity (entities+=Entity)*)?
		//        (mapped_entities+=MappedEntity (mapped_entities+=MappedEntity)*)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model}
		//'Model'
		//BEGIN
		//    (headers+=Header (headers+=Header)*)?
		//    (entities+=Entity (entities+=Entity)*)?
		//    (mapped_entities+=MappedEntity (mapped_entities+=MappedEntity)*)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//'Model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//(headers+=Header (headers+=Header)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//headers+=Header
		public Assignment getHeadersAssignment_3_0() { return cHeadersAssignment_3_0; }
		
		//Header
		public RuleCall getHeadersHeaderParserRuleCall_3_0_0() { return cHeadersHeaderParserRuleCall_3_0_0; }
		
		//(headers+=Header)*
		public Assignment getHeadersAssignment_3_1() { return cHeadersAssignment_3_1; }
		
		//Header
		public RuleCall getHeadersHeaderParserRuleCall_3_1_0() { return cHeadersHeaderParserRuleCall_3_1_0; }
		
		//(entities+=Entity (entities+=Entity)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//entities+=Entity
		public Assignment getEntitiesAssignment_4_0() { return cEntitiesAssignment_4_0; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_0_0() { return cEntitiesEntityParserRuleCall_4_0_0; }
		
		//(entities+=Entity)*
		public Assignment getEntitiesAssignment_4_1() { return cEntitiesAssignment_4_1; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_1_0() { return cEntitiesEntityParserRuleCall_4_1_0; }
		
		//(mapped_entities+=MappedEntity (mapped_entities+=MappedEntity)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//mapped_entities+=MappedEntity
		public Assignment getMapped_entitiesAssignment_5_0() { return cMapped_entitiesAssignment_5_0; }
		
		//MappedEntity
		public RuleCall getMapped_entitiesMappedEntityParserRuleCall_5_0_0() { return cMapped_entitiesMappedEntityParserRuleCall_5_0_0; }
		
		//(mapped_entities+=MappedEntity)*
		public Assignment getMapped_entitiesAssignment_5_1() { return cMapped_entitiesAssignment_5_1; }
		
		//MappedEntity
		public RuleCall getMapped_entitiesMappedEntityParserRuleCall_5_1_0() { return cMapped_entitiesMappedEntityParserRuleCall_5_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class SuperSiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.SuperSite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSuperSite_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSiteWithModalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSiteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SuperSite returns SuperSite:
		//    SuperSite_Impl | SiteWithModal | Site;
		@Override public ParserRule getRule() { return rule; }
		
		//SuperSite_Impl | SiteWithModal | Site
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SuperSite_Impl
		public RuleCall getSuperSite_ImplParserRuleCall_0() { return cSuperSite_ImplParserRuleCall_0; }
		
		//SiteWithModal
		public RuleCall getSiteWithModalParserRuleCall_1() { return cSiteWithModalParserRuleCall_1; }
		
		//Site
		public RuleCall getSiteParserRuleCall_2() { return cSiteParserRuleCall_2; }
	}
	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHeaderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAppNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAppNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAppNameEStringParserRuleCall_3_1_0 = (RuleCall)cAppNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSitesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSitesSuperSiteParserRuleCall_4_0_0 = (RuleCall)cSitesAssignment_4_0.eContents().get(0);
		private final Assignment cSitesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSitesSuperSiteParserRuleCall_4_1_0 = (RuleCall)cSitesAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Header returns Header:
		//    {Header}
		//    'Header'
		//    BEGIN
		//        ('appName' appName=EString)?
		//        (sites+=SuperSite (sites+=SuperSite)*)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header}
		//'Header'
		//BEGIN
		//    ('appName' appName=EString)?
		//    (sites+=SuperSite (sites+=SuperSite)*)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Header}
		public Action getHeaderAction_0() { return cHeaderAction_0; }
		
		//'Header'
		public Keyword getHeaderKeyword_1() { return cHeaderKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//('appName' appName=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'appName'
		public Keyword getAppNameKeyword_3_0() { return cAppNameKeyword_3_0; }
		
		//appName=EString
		public Assignment getAppNameAssignment_3_1() { return cAppNameAssignment_3_1; }
		
		//EString
		public RuleCall getAppNameEStringParserRuleCall_3_1_0() { return cAppNameEStringParserRuleCall_3_1_0; }
		
		//(sites+=SuperSite (sites+=SuperSite)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//sites+=SuperSite
		public Assignment getSitesAssignment_4_0() { return cSitesAssignment_4_0; }
		
		//SuperSite
		public RuleCall getSitesSuperSiteParserRuleCall_4_0_0() { return cSitesSuperSiteParserRuleCall_4_0_0; }
		
		//(sites+=SuperSite)*
		public Assignment getSitesAssignment_4_1() { return cSitesAssignment_4_1; }
		
		//SuperSite
		public RuleCall getSitesSuperSiteParserRuleCall_4_1_0() { return cSitesSuperSiteParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTechKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTechAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTechEStringParserRuleCall_3_1_0 = (RuleCall)cTechAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPathKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPathAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPathEStringParserRuleCall_4_1_0 = (RuleCall)cPathAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cModeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cModeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cModeModeEnumRuleCall_5_1_0 = (RuleCall)cModeAssignment_5_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Entity returns Entity:
		//    {Entity}
		//    'Entity'
		//    BEGIN
		//        ('tech' tech=EString)?
		//        ('path' path=EString)?
		//        ('mode' mode=Mode)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Entity}
		//'Entity'
		//BEGIN
		//    ('tech' tech=EString)?
		//    ('path' path=EString)?
		//    ('mode' mode=Mode)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Entity}
		public Action getEntityAction_0() { return cEntityAction_0; }
		
		//'Entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//('tech' tech=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'tech'
		public Keyword getTechKeyword_3_0() { return cTechKeyword_3_0; }
		
		//tech=EString
		public Assignment getTechAssignment_3_1() { return cTechAssignment_3_1; }
		
		//EString
		public RuleCall getTechEStringParserRuleCall_3_1_0() { return cTechEStringParserRuleCall_3_1_0; }
		
		//('path' path=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'path'
		public Keyword getPathKeyword_4_0() { return cPathKeyword_4_0; }
		
		//path=EString
		public Assignment getPathAssignment_4_1() { return cPathAssignment_4_1; }
		
		//EString
		public RuleCall getPathEStringParserRuleCall_4_1_0() { return cPathEStringParserRuleCall_4_1_0; }
		
		//('mode' mode=Mode)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'mode'
		public Keyword getModeKeyword_5_0() { return cModeKeyword_5_0; }
		
		//mode=Mode
		public Assignment getModeAssignment_5_1() { return cModeAssignment_5_1; }
		
		//Mode
		public RuleCall getModeModeEnumRuleCall_5_1_0() { return cModeModeEnumRuleCall_5_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class MappedEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.MappedEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappedEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMappedEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInfoPropsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInfoPropsInfoPropertyParserRuleCall_3_0_0 = (RuleCall)cInfoPropsAssignment_3_0.eContents().get(0);
		private final Assignment cInfoPropsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInfoPropsInfoPropertyParserRuleCall_3_1_0 = (RuleCall)cInfoPropsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLinkedPropsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLinkedPropsLinkedPropertyParserRuleCall_4_0_0 = (RuleCall)cLinkedPropsAssignment_4_0.eContents().get(0);
		private final Assignment cLinkedPropsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLinkedPropsLinkedPropertyParserRuleCall_4_1_0 = (RuleCall)cLinkedPropsAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//MappedEntity returns MappedEntity:
		//    {MappedEntity}
		//    'MappedEntity'
		//    BEGIN
		//        (infoProps+=InfoProperty (infoProps+=InfoProperty)*)?
		//        (linkedProps+=LinkedProperty (linkedProps+=LinkedProperty)*)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{MappedEntity}
		//'MappedEntity'
		//BEGIN
		//    (infoProps+=InfoProperty (infoProps+=InfoProperty)*)?
		//    (linkedProps+=LinkedProperty (linkedProps+=LinkedProperty)*)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{MappedEntity}
		public Action getMappedEntityAction_0() { return cMappedEntityAction_0; }
		
		//'MappedEntity'
		public Keyword getMappedEntityKeyword_1() { return cMappedEntityKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//(infoProps+=InfoProperty (infoProps+=InfoProperty)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//infoProps+=InfoProperty
		public Assignment getInfoPropsAssignment_3_0() { return cInfoPropsAssignment_3_0; }
		
		//InfoProperty
		public RuleCall getInfoPropsInfoPropertyParserRuleCall_3_0_0() { return cInfoPropsInfoPropertyParserRuleCall_3_0_0; }
		
		//(infoProps+=InfoProperty)*
		public Assignment getInfoPropsAssignment_3_1() { return cInfoPropsAssignment_3_1; }
		
		//InfoProperty
		public RuleCall getInfoPropsInfoPropertyParserRuleCall_3_1_0() { return cInfoPropsInfoPropertyParserRuleCall_3_1_0; }
		
		//(linkedProps+=LinkedProperty (linkedProps+=LinkedProperty)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//linkedProps+=LinkedProperty
		public Assignment getLinkedPropsAssignment_4_0() { return cLinkedPropsAssignment_4_0; }
		
		//LinkedProperty
		public RuleCall getLinkedPropsLinkedPropertyParserRuleCall_4_0_0() { return cLinkedPropsLinkedPropertyParserRuleCall_4_0_0; }
		
		//(linkedProps+=LinkedProperty)*
		public Assignment getLinkedPropsAssignment_4_1() { return cLinkedPropsAssignment_4_1; }
		
		//LinkedProperty
		public RuleCall getLinkedPropsLinkedPropertyParserRuleCall_4_1_0() { return cLinkedPropsLinkedPropertyParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class SuperSite_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.SuperSite_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuperSiteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuperSiteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//SuperSite_Impl returns SuperSite:
		//    {SuperSite}
		//    'SuperSite'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{SuperSite}
		//'SuperSite'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{SuperSite}
		public Action getSuperSiteAction_0() { return cSuperSiteAction_0; }
		
		//'SuperSite'
		public Keyword getSuperSiteKeyword_1() { return cSuperSiteKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class SiteWithModalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.SiteWithModal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSiteWithModalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSiteWithModalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSitesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSitesSuperSiteParserRuleCall_4_0_0 = (RuleCall)cSitesAssignment_4_0.eContents().get(0);
		private final Assignment cSitesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSitesSuperSiteParserRuleCall_4_1_0 = (RuleCall)cSitesAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//SiteWithModal returns SiteWithModal:
		//    {SiteWithModal}
		//    'SiteWithModal'
		//    name=EString
		//    BEGIN
		//        (sites+=SuperSite (sites+=SuperSite)*)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{SiteWithModal}
		//'SiteWithModal'
		//name=EString
		//BEGIN
		//    (sites+=SuperSite (sites+=SuperSite)*)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{SiteWithModal}
		public Action getSiteWithModalAction_0() { return cSiteWithModalAction_0; }
		
		//'SiteWithModal'
		public Keyword getSiteWithModalKeyword_1() { return cSiteWithModalKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//(sites+=SuperSite (sites+=SuperSite)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//sites+=SuperSite
		public Assignment getSitesAssignment_4_0() { return cSitesAssignment_4_0; }
		
		//SuperSite
		public RuleCall getSitesSuperSiteParserRuleCall_4_0_0() { return cSitesSuperSiteParserRuleCall_4_0_0; }
		
		//(sites+=SuperSite)*
		public Assignment getSitesAssignment_4_1() { return cSitesAssignment_4_1; }
		
		//SuperSite
		public RuleCall getSitesSuperSiteParserRuleCall_4_1_0() { return cSitesSuperSiteParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class SiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.Site");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSiteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSiteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Site returns Site:
		//    {Site}
		//    'Site'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Site}
		//'Site'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Site}
		public Action getSiteAction_0() { return cSiteAction_0; }
		
		//'Site'
		public Keyword getSiteKeyword_1() { return cSiteKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class InfoPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.InfoProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInfoPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInfoPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPageKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPageAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cPageSiteCrossReference_3_1_0 = (CrossReference)cPageAssignment_3_1.eContents().get(0);
		private final RuleCall cPageSiteEStringParserRuleCall_3_1_0_1 = (RuleCall)cPageSiteCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEntitiesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEntitiesInfoEntityParserRuleCall_4_0_0 = (RuleCall)cEntitiesAssignment_4_0.eContents().get(0);
		private final Assignment cEntitiesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEntitiesInfoEntityParserRuleCall_4_1_0 = (RuleCall)cEntitiesAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//InfoProperty returns InfoProperty:
		//    {InfoProperty}
		//    'InfoProperty'
		//    BEGIN
		//        ('page' page=[Site|EString])?
		//        (entities+=InfoEntity (entities+=InfoEntity)*)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{InfoProperty}
		//'InfoProperty'
		//BEGIN
		//    ('page' page=[Site|EString])?
		//    (entities+=InfoEntity (entities+=InfoEntity)*)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{InfoProperty}
		public Action getInfoPropertyAction_0() { return cInfoPropertyAction_0; }
		
		//'InfoProperty'
		public Keyword getInfoPropertyKeyword_1() { return cInfoPropertyKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//('page' page=[Site|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'page'
		public Keyword getPageKeyword_3_0() { return cPageKeyword_3_0; }
		
		//page=[Site|EString]
		public Assignment getPageAssignment_3_1() { return cPageAssignment_3_1; }
		
		//[Site|EString]
		public CrossReference getPageSiteCrossReference_3_1_0() { return cPageSiteCrossReference_3_1_0; }
		
		//EString
		public RuleCall getPageSiteEStringParserRuleCall_3_1_0_1() { return cPageSiteEStringParserRuleCall_3_1_0_1; }
		
		//(entities+=InfoEntity (entities+=InfoEntity)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//entities+=InfoEntity
		public Assignment getEntitiesAssignment_4_0() { return cEntitiesAssignment_4_0; }
		
		//InfoEntity
		public RuleCall getEntitiesInfoEntityParserRuleCall_4_0_0() { return cEntitiesInfoEntityParserRuleCall_4_0_0; }
		
		//(entities+=InfoEntity)*
		public Assignment getEntitiesAssignment_4_1() { return cEntitiesAssignment_4_1; }
		
		//InfoEntity
		public RuleCall getEntitiesInfoEntityParserRuleCall_4_1_0() { return cEntitiesInfoEntityParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class LinkedPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.LinkedProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkedPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinkedPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cNameSiteCrossReference_3_1_0 = (CrossReference)cNameAssignment_3_1.eContents().get(0);
		private final RuleCall cNameSiteEStringParserRuleCall_3_1_0_1 = (RuleCall)cNameSiteCrossReference_3_1_0.eContents().get(1);
		private final Assignment cPageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPageRedirectPageParserRuleCall_4_0 = (RuleCall)cPageAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//LinkedProperty returns LinkedProperty:
		//    {LinkedProperty}
		//    'LinkedProperty'
		//    BEGIN
		//        ('name' name=[Site|EString])?
		//        (page=RedirectPage)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{LinkedProperty}
		//'LinkedProperty'
		//BEGIN
		//    ('name' name=[Site|EString])?
		//    (page=RedirectPage)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{LinkedProperty}
		public Action getLinkedPropertyAction_0() { return cLinkedPropertyAction_0; }
		
		//'LinkedProperty'
		public Keyword getLinkedPropertyKeyword_1() { return cLinkedPropertyKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//('name' name=[Site|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'name'
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }
		
		//name=[Site|EString]
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//[Site|EString]
		public CrossReference getNameSiteCrossReference_3_1_0() { return cNameSiteCrossReference_3_1_0; }
		
		//EString
		public RuleCall getNameSiteEStringParserRuleCall_3_1_0_1() { return cNameSiteEStringParserRuleCall_3_1_0_1; }
		
		//(page=RedirectPage)?
		public Assignment getPageAssignment_4() { return cPageAssignment_4; }
		
		//RedirectPage
		public RuleCall getPageRedirectPageParserRuleCall_4_0() { return cPageRedirectPageParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class InfoEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.InfoEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInfoEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInfoEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEntriesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEntriesInfoEntryEnumRuleCall_3_0_0 = (RuleCall)cEntriesAssignment_3_0.eContents().get(0);
		private final Assignment cEntriesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEntriesInfoEntryEnumRuleCall_3_1_0 = (RuleCall)cEntriesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInfoValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInfoValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInfoValueEStringParserRuleCall_4_1_0 = (RuleCall)cInfoValueAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//InfoEntity returns InfoEntity:
		//    {InfoEntity}
		//    'InfoEntity'
		//    BEGIN
		//        (entries+=InfoEntry (entries+=InfoEntry)*)?
		//        ('infoValue' infoValue=EString)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{InfoEntity}
		//'InfoEntity'
		//BEGIN
		//    (entries+=InfoEntry (entries+=InfoEntry)*)?
		//    ('infoValue' infoValue=EString)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{InfoEntity}
		public Action getInfoEntityAction_0() { return cInfoEntityAction_0; }
		
		//'InfoEntity'
		public Keyword getInfoEntityKeyword_1() { return cInfoEntityKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//(entries+=InfoEntry (entries+=InfoEntry)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//entries+=InfoEntry
		public Assignment getEntriesAssignment_3_0() { return cEntriesAssignment_3_0; }
		
		//InfoEntry
		public RuleCall getEntriesInfoEntryEnumRuleCall_3_0_0() { return cEntriesInfoEntryEnumRuleCall_3_0_0; }
		
		//(entries+=InfoEntry)*
		public Assignment getEntriesAssignment_3_1() { return cEntriesAssignment_3_1; }
		
		//InfoEntry
		public RuleCall getEntriesInfoEntryEnumRuleCall_3_1_0() { return cEntriesInfoEntryEnumRuleCall_3_1_0; }
		
		//('infoValue' infoValue=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'infoValue'
		public Keyword getInfoValueKeyword_4_0() { return cInfoValueKeyword_4_0; }
		
		//infoValue=EString
		public Assignment getInfoValueAssignment_4_1() { return cInfoValueAssignment_4_1; }
		
		//EString
		public RuleCall getInfoValueEStringParserRuleCall_4_1_0() { return cInfoValueEStringParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class RedirectPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.RedirectPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRedirectPageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRedirectPageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSiteKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSiteAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cSiteSiteCrossReference_3_2_0 = (CrossReference)cSiteAssignment_3_2.eContents().get(0);
		private final RuleCall cSiteSiteEStringParserRuleCall_3_2_0_1 = (RuleCall)cSiteSiteCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cSiteAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cSiteSiteCrossReference_3_3_1_0 = (CrossReference)cSiteAssignment_3_3_1.eContents().get(0);
		private final RuleCall cSiteSiteEStringParserRuleCall_3_3_1_0_1 = (RuleCall)cSiteSiteCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//RedirectPage returns RedirectPage:
		//    {RedirectPage}
		//    'RedirectPage'
		//    BEGIN
		//        ('site' '(' site+=[Site|EString] ( "," site+=[Site|EString])* ')' )?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{RedirectPage}
		//'RedirectPage'
		//BEGIN
		//    ('site' '(' site+=[Site|EString] ( "," site+=[Site|EString])* ')' )?
		//END
		public Group getGroup() { return cGroup; }
		
		//{RedirectPage}
		public Action getRedirectPageAction_0() { return cRedirectPageAction_0; }
		
		//'RedirectPage'
		public Keyword getRedirectPageKeyword_1() { return cRedirectPageKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//('site' '(' site+=[Site|EString] ( "," site+=[Site|EString])* ')' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'site'
		public Keyword getSiteKeyword_3_0() { return cSiteKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//site+=[Site|EString]
		public Assignment getSiteAssignment_3_2() { return cSiteAssignment_3_2; }
		
		//[Site|EString]
		public CrossReference getSiteSiteCrossReference_3_2_0() { return cSiteSiteCrossReference_3_2_0; }
		
		//EString
		public RuleCall getSiteSiteEStringParserRuleCall_3_2_0_1() { return cSiteSiteEStringParserRuleCall_3_2_0_1; }
		
		//( "," site+=[Site|EString])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//site+=[Site|EString]
		public Assignment getSiteAssignment_3_3_1() { return cSiteAssignment_3_3_1; }
		
		//[Site|EString]
		public CrossReference getSiteSiteCrossReference_3_3_1_0() { return cSiteSiteCrossReference_3_3_1_0; }
		
		//EString
		public RuleCall getSiteSiteEStringParserRuleCall_3_3_1_0_1() { return cSiteSiteEStringParserRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// 4. inherits expressions from Xbase and redefines the syntax of block expressions
		//@Override
		//XBlockExpression returns xbase::XExpression:
		//    {xbase::XBlockExpression}
		//    BEGIN
		//        (expressions+=XExpressionOrVarDeclaration ';'?)*
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{xbase::XBlockExpression}
		//BEGIN
		//    (expressions+=XExpressionOrVarDeclaration ';'?)*
		//END
		public Group getGroup() { return cGroup; }
		
		//{xbase::XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//(expressions+=XExpressionOrVarDeclaration ';'?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//expressions+=XExpressionOrVarDeclaration
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }
		
		//XExpressionOrVarDeclaration
		public RuleCall getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0() { return cExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	
	public class ModeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.Mode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEVEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEVDEVKeyword_0_0 = (Keyword)cDEVEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRODEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRODPRODKeyword_1_0 = (Keyword)cPRODEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Mode returns Mode:
		//                DEV = 'DEV' | PROD = 'PROD';
		public EnumRule getRule() { return rule; }
		
		//DEV = 'DEV' | PROD = 'PROD'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DEV = 'DEV'
		public EnumLiteralDeclaration getDEVEnumLiteralDeclaration_0() { return cDEVEnumLiteralDeclaration_0; }
		
		//'DEV'
		public Keyword getDEVDEVKeyword_0_0() { return cDEVDEVKeyword_0_0; }
		
		//PROD = 'PROD'
		public EnumLiteralDeclaration getPRODEnumLiteralDeclaration_1() { return cPRODEnumLiteralDeclaration_1; }
		
		//'PROD'
		public Keyword getPRODPRODKeyword_1_0() { return cPRODPRODKeyword_1_0; }
	}
	public class InfoEntryElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.InfoEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMODMODKeyword_0_0 = (Keyword)cMODEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFREQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFREQFREQKeyword_1_0 = (Keyword)cFREQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRIOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRIOPRIOKeyword_2_0 = (Keyword)cPRIOEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum InfoEntry returns InfoEntry:
		//                MOD = 'MOD' | FREQ = 'FREQ' | PRIO = 'PRIO';
		public EnumRule getRule() { return rule; }
		
		//MOD = 'MOD' | FREQ = 'FREQ' | PRIO = 'PRIO'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MOD = 'MOD'
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_0() { return cMODEnumLiteralDeclaration_0; }
		
		//'MOD'
		public Keyword getMODMODKeyword_0_0() { return cMODMODKeyword_0_0; }
		
		//FREQ = 'FREQ'
		public EnumLiteralDeclaration getFREQEnumLiteralDeclaration_1() { return cFREQEnumLiteralDeclaration_1; }
		
		//'FREQ'
		public Keyword getFREQFREQKeyword_1_0() { return cFREQFREQKeyword_1_0; }
		
		//PRIO = 'PRIO'
		public EnumLiteralDeclaration getPRIOEnumLiteralDeclaration_2() { return cPRIOEnumLiteralDeclaration_2; }
		
		//'PRIO'
		public Keyword getPRIOPRIOKeyword_2_0() { return cPRIOPRIOKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final SuperSiteElements pSuperSite;
	private final HeaderElements pHeader;
	private final EntityElements pEntity;
	private final MappedEntityElements pMappedEntity;
	private final EStringElements pEString;
	private final SuperSite_ImplElements pSuperSite_Impl;
	private final SiteWithModalElements pSiteWithModal;
	private final SiteElements pSite;
	private final ModeElements eMode;
	private final InfoPropertyElements pInfoProperty;
	private final LinkedPropertyElements pLinkedProperty;
	private final InfoEntityElements pInfoEntity;
	private final InfoEntryElements eInfoEntry;
	private final RedirectPageElements pRedirectPage;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final XBlockExpressionElements pXBlockExpression;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public MyXeniaGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pSuperSite = new SuperSiteElements();
		this.pHeader = new HeaderElements();
		this.pEntity = new EntityElements();
		this.pMappedEntity = new MappedEntityElements();
		this.pEString = new EStringElements();
		this.pSuperSite_Impl = new SuperSite_ImplElements();
		this.pSiteWithModal = new SiteWithModalElements();
		this.pSite = new SiteElements();
		this.eMode = new ModeElements();
		this.pInfoProperty = new InfoPropertyElements();
		this.pLinkedProperty = new LinkedPropertyElements();
		this.pInfoEntity = new InfoEntityElements();
		this.eInfoEntry = new InfoEntryElements();
		this.pRedirectPage = new RedirectPageElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.myxenia.MyXenia.END");
		this.pXBlockExpression = new XBlockExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.myxenia.MyXenia".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model returns Model:
	//    {Model}
	//    'Model'
	//    BEGIN
	//        (headers+=Header (headers+=Header)*)?
	//        (entities+=Entity (entities+=Entity)*)?
	//        (mapped_entities+=MappedEntity (mapped_entities+=MappedEntity)*)?
	//    END;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SuperSite returns SuperSite:
	//    SuperSite_Impl | SiteWithModal | Site;
	public SuperSiteElements getSuperSiteAccess() {
		return pSuperSite;
	}
	
	public ParserRule getSuperSiteRule() {
		return getSuperSiteAccess().getRule();
	}
	
	//Header returns Header:
	//    {Header}
	//    'Header'
	//    BEGIN
	//        ('appName' appName=EString)?
	//        (sites+=SuperSite (sites+=SuperSite)*)?
	//    END;
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	//Entity returns Entity:
	//    {Entity}
	//    'Entity'
	//    BEGIN
	//        ('tech' tech=EString)?
	//        ('path' path=EString)?
	//        ('mode' mode=Mode)?
	//    END;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//MappedEntity returns MappedEntity:
	//    {MappedEntity}
	//    'MappedEntity'
	//    BEGIN
	//        (infoProps+=InfoProperty (infoProps+=InfoProperty)*)?
	//        (linkedProps+=LinkedProperty (linkedProps+=LinkedProperty)*)?
	//    END;
	public MappedEntityElements getMappedEntityAccess() {
		return pMappedEntity;
	}
	
	public ParserRule getMappedEntityRule() {
		return getMappedEntityAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//SuperSite_Impl returns SuperSite:
	//    {SuperSite}
	//    'SuperSite'
	//    name=EString;
	public SuperSite_ImplElements getSuperSite_ImplAccess() {
		return pSuperSite_Impl;
	}
	
	public ParserRule getSuperSite_ImplRule() {
		return getSuperSite_ImplAccess().getRule();
	}
	
	//SiteWithModal returns SiteWithModal:
	//    {SiteWithModal}
	//    'SiteWithModal'
	//    name=EString
	//    BEGIN
	//        (sites+=SuperSite (sites+=SuperSite)*)?
	//    END;
	public SiteWithModalElements getSiteWithModalAccess() {
		return pSiteWithModal;
	}
	
	public ParserRule getSiteWithModalRule() {
		return getSiteWithModalAccess().getRule();
	}
	
	//Site returns Site:
	//    {Site}
	//    'Site'
	//    name=EString;
	public SiteElements getSiteAccess() {
		return pSite;
	}
	
	public ParserRule getSiteRule() {
		return getSiteAccess().getRule();
	}
	
	//enum Mode returns Mode:
	//                DEV = 'DEV' | PROD = 'PROD';
	public ModeElements getModeAccess() {
		return eMode;
	}
	
	public EnumRule getModeRule() {
		return getModeAccess().getRule();
	}
	
	//InfoProperty returns InfoProperty:
	//    {InfoProperty}
	//    'InfoProperty'
	//    BEGIN
	//        ('page' page=[Site|EString])?
	//        (entities+=InfoEntity (entities+=InfoEntity)*)?
	//    END;
	public InfoPropertyElements getInfoPropertyAccess() {
		return pInfoProperty;
	}
	
	public ParserRule getInfoPropertyRule() {
		return getInfoPropertyAccess().getRule();
	}
	
	//LinkedProperty returns LinkedProperty:
	//    {LinkedProperty}
	//    'LinkedProperty'
	//    BEGIN
	//        ('name' name=[Site|EString])?
	//        (page=RedirectPage)?
	//    END;
	public LinkedPropertyElements getLinkedPropertyAccess() {
		return pLinkedProperty;
	}
	
	public ParserRule getLinkedPropertyRule() {
		return getLinkedPropertyAccess().getRule();
	}
	
	//InfoEntity returns InfoEntity:
	//    {InfoEntity}
	//    'InfoEntity'
	//    BEGIN
	//        (entries+=InfoEntry (entries+=InfoEntry)*)?
	//        ('infoValue' infoValue=EString)?
	//    END;
	public InfoEntityElements getInfoEntityAccess() {
		return pInfoEntity;
	}
	
	public ParserRule getInfoEntityRule() {
		return getInfoEntityAccess().getRule();
	}
	
	//enum InfoEntry returns InfoEntry:
	//                MOD = 'MOD' | FREQ = 'FREQ' | PRIO = 'PRIO';
	public InfoEntryElements getInfoEntryAccess() {
		return eInfoEntry;
	}
	
	public EnumRule getInfoEntryRule() {
		return getInfoEntryAccess().getRule();
	}
	
	//RedirectPage returns RedirectPage:
	//    {RedirectPage}
	//    'RedirectPage'
	//    BEGIN
	//        ('site' '(' site+=[Site|EString] ( "," site+=[Site|EString])* ')' )?
	//    END;
	public RedirectPageElements getRedirectPageAccess() {
		return pRedirectPage;
	}
	
	public ParserRule getRedirectPageRule() {
		return getRedirectPageAccess().getRule();
	}
	
	//// 3. include whitespace-aware blocks in your language is to use synthetic tokens in the grammar
	////    by writing terminals of the form 'synthetic:<terminal name>'
	//terminal BEGIN: 'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END: 'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//// 4. inherits expressions from Xbase and redefines the syntax of block expressions
	//@Override
	//XBlockExpression returns xbase::XExpression:
	//    {xbase::XBlockExpression}
	//    BEGIN
	//        (expressions+=XExpressionOrVarDeclaration ';'?)*
	//    END;
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return pXBlockExpression;
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment returns XExpression :
	//    {XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |
	//    XOrExpression (
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//    "!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	//;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//            =>explicitOperationCall?='('
	//                (
	//                    memberCallArguments+=XShortClosure
	//                  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                )?
	//            ')')?
	//            memberCallArguments+=XClosure?
	//        )*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression returns XExpression:
	//    XConstructorCall |
	//    XBlockExpression |
	//    XSwitchExpression |
	//    XSynchronizedExpression |
	//    XFeatureCall |
	//    XLiteral |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XDoWhileExpression |
	//    XThrowExpression |
	//    XReturnExpression |
	//    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral returns XExpression:
	//    XCollectionLiteral |
	//    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    XTypeLiteral
	//;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XExpression
	//    (=>'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//    'do'
	//        body=XExpression
	//    'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//    featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XExpression)?
	//    |    'finally' finallyExpression=XExpression
	//    );
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ';'?
	//;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
