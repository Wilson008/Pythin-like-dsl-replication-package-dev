/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.myxenia.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.myxenia.services.MyXeniaGrammarAccess;
import xenia.Entity;
import xenia.Header;
import xenia.MappedEntity;
import xenia.Model;
import xenia.SuperSite;

@SuppressWarnings("all")
public class MyXeniaFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyXeniaGrammarAccess _myXeniaGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Header> _headers = model.getHeaders();
    for (final Header header : _headers) {
      document.<Header>format(header);
    }
    EList<Entity> _entities = model.getEntities();
    for (final Entity entity : _entities) {
      document.<Entity>format(entity);
    }
    EList<MappedEntity> _mapped_entities = model.getMapped_entities();
    for (final MappedEntity mappedEntity : _mapped_entities) {
      document.<MappedEntity>format(mappedEntity);
    }
  }
  
  protected void _format(final Header header, @Extension final IFormattableDocument document) {
    EList<SuperSite> _sites = header.getSites();
    for (final SuperSite superSite : _sites) {
      document.<SuperSite>format(superSite);
    }
  }
  
  public void format(final Object header, final IFormattableDocument document) {
    if (header instanceof XtextResource) {
      _format((XtextResource)header, document);
      return;
    } else if (header instanceof Header) {
      _format((Header)header, document);
      return;
    } else if (header instanceof Model) {
      _format((Model)header, document);
      return;
    } else if (header instanceof EObject) {
      _format((EObject)header, document);
      return;
    } else if (header == null) {
      _format((Void)null, document);
      return;
    } else if (header != null) {
      _format(header, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(header, document).toString());
    }
  }
}
