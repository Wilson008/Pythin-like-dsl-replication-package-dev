/**
 * generated by Xtext 2.25.0
 */
package org.xtext.mycsm.formatting2;

import com.google.inject.Inject;
import csm.CSM;
import csm.GeneralResource;
import csm.Message;
import csm.PathConnection;
import csm.Scenarion;
import csm.Step;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeConstraint;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XCollectionLiteral;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.xtext.mycsm.services.MyCsmGrammarAccess;

@SuppressWarnings("all")
public class MyCsmFormatter extends XbaseFormatter {
  @Inject
  @Extension
  private MyCsmGrammarAccess _myCsmGrammarAccess;
  
  protected void _format(final CSM cSM, @Extension final IFormattableDocument document) {
    EList<Step> _step = cSM.getStep();
    for (final Step step : _step) {
      document.<Step>format(step);
    }
    EList<GeneralResource> _generalResource = cSM.getGeneralResource();
    for (final GeneralResource generalResource : _generalResource) {
      document.<GeneralResource>format(generalResource);
    }
    EList<Scenarion> _scenarion = cSM.getScenarion();
    for (final Scenarion scenarion : _scenarion) {
      document.<Scenarion>format(scenarion);
    }
    EList<Message> _message = cSM.getMessage();
    for (final Message message : _message) {
      document.<Message>format(message);
    }
  }
  
  protected void _format(final Scenarion scenarion, @Extension final IFormattableDocument document) {
    EList<Step> _step = scenarion.getStep();
    for (final Step step : _step) {
      document.<Step>format(step);
    }
    EList<PathConnection> _pathconnection = scenarion.getPathconnection();
    for (final PathConnection pathConnection : _pathconnection) {
      document.<PathConnection>format(pathConnection);
    }
  }
  
  public void format(final Object cSM, final IFormattableDocument document) {
    if (cSM instanceof JvmTypeParameter) {
      _format((JvmTypeParameter)cSM, document);
      return;
    } else if (cSM instanceof JvmFormalParameter) {
      _format((JvmFormalParameter)cSM, document);
      return;
    } else if (cSM instanceof XtextResource) {
      _format((XtextResource)cSM, document);
      return;
    } else if (cSM instanceof XAssignment) {
      _format((XAssignment)cSM, document);
      return;
    } else if (cSM instanceof XBinaryOperation) {
      _format((XBinaryOperation)cSM, document);
      return;
    } else if (cSM instanceof XDoWhileExpression) {
      _format((XDoWhileExpression)cSM, document);
      return;
    } else if (cSM instanceof XFeatureCall) {
      _format((XFeatureCall)cSM, document);
      return;
    } else if (cSM instanceof XMemberFeatureCall) {
      _format((XMemberFeatureCall)cSM, document);
      return;
    } else if (cSM instanceof XPostfixOperation) {
      _format((XPostfixOperation)cSM, document);
      return;
    } else if (cSM instanceof XWhileExpression) {
      _format((XWhileExpression)cSM, document);
      return;
    } else if (cSM instanceof XFunctionTypeRef) {
      _format((XFunctionTypeRef)cSM, document);
      return;
    } else if (cSM instanceof JvmGenericArrayTypeReference) {
      _format((JvmGenericArrayTypeReference)cSM, document);
      return;
    } else if (cSM instanceof JvmParameterizedTypeReference) {
      _format((JvmParameterizedTypeReference)cSM, document);
      return;
    } else if (cSM instanceof JvmWildcardTypeReference) {
      _format((JvmWildcardTypeReference)cSM, document);
      return;
    } else if (cSM instanceof XBasicForLoopExpression) {
      _format((XBasicForLoopExpression)cSM, document);
      return;
    } else if (cSM instanceof XBlockExpression) {
      _format((XBlockExpression)cSM, document);
      return;
    } else if (cSM instanceof XCastedExpression) {
      _format((XCastedExpression)cSM, document);
      return;
    } else if (cSM instanceof XClosure) {
      _format((XClosure)cSM, document);
      return;
    } else if (cSM instanceof XCollectionLiteral) {
      _format((XCollectionLiteral)cSM, document);
      return;
    } else if (cSM instanceof XConstructorCall) {
      _format((XConstructorCall)cSM, document);
      return;
    } else if (cSM instanceof XForLoopExpression) {
      _format((XForLoopExpression)cSM, document);
      return;
    } else if (cSM instanceof XIfExpression) {
      _format((XIfExpression)cSM, document);
      return;
    } else if (cSM instanceof XInstanceOfExpression) {
      _format((XInstanceOfExpression)cSM, document);
      return;
    } else if (cSM instanceof XReturnExpression) {
      _format((XReturnExpression)cSM, document);
      return;
    } else if (cSM instanceof XSwitchExpression) {
      _format((XSwitchExpression)cSM, document);
      return;
    } else if (cSM instanceof XSynchronizedExpression) {
      _format((XSynchronizedExpression)cSM, document);
      return;
    } else if (cSM instanceof XThrowExpression) {
      _format((XThrowExpression)cSM, document);
      return;
    } else if (cSM instanceof XTryCatchFinallyExpression) {
      _format((XTryCatchFinallyExpression)cSM, document);
      return;
    } else if (cSM instanceof XTypeLiteral) {
      _format((XTypeLiteral)cSM, document);
      return;
    } else if (cSM instanceof XVariableDeclaration) {
      _format((XVariableDeclaration)cSM, document);
      return;
    } else if (cSM instanceof CSM) {
      _format((CSM)cSM, document);
      return;
    } else if (cSM instanceof Scenarion) {
      _format((Scenarion)cSM, document);
      return;
    } else if (cSM instanceof JvmTypeConstraint) {
      _format((JvmTypeConstraint)cSM, document);
      return;
    } else if (cSM instanceof XExpression) {
      _format((XExpression)cSM, document);
      return;
    } else if (cSM instanceof XImportDeclaration) {
      _format((XImportDeclaration)cSM, document);
      return;
    } else if (cSM instanceof XImportSection) {
      _format((XImportSection)cSM, document);
      return;
    } else if (cSM instanceof EObject) {
      _format((EObject)cSM, document);
      return;
    } else if (cSM == null) {
      _format((Void)null, document);
      return;
    } else if (cSM != null) {
      _format(cSM, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cSM, document).toString());
    }
  }
}
