/*
 * generated by Xtext 2.25.0
 */
lexer grammar InternalMyCsmLexer;

@header {
package org.xtext.mycsm.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

ProcessingResource : 'ProcessingResource';

ExternalService : 'ExternalService';

ResourceAcquire : 'ResourceAcquire';

ResourceRelease : 'ResourceRelease';

GeneralResource : 'generalResource';

ResourceAcquire_1 : 'resourceAcquire';

ResourceRelease_1 : 'resourceRelease';

ActiveResource : 'activeResource';

Pathconnection : 'pathconnection';

Synchronized : 'synchronized';

Instanceof : 'instanceof';

Component : 'Component';

Scenarion : 'Scenarion';

Extension : 'extension';

Scenarion_1 : 'scenarion';

Workload : 'Workload';

PostPath : 'postPath';

Workload_1 : 'workload';

Message : 'Message';

Seqence : 'Seqence';

Default : 'default';

Extends : 'extends';

Finally : 'finally';

Message_1 : 'message';

PrePath : 'prePath';

Branch : 'Branch';

Import : 'import';

Return : 'return';

Static : 'static';

Switch : 'switch';

Typeof : 'typeof';

Merge : 'Merge';

Start : 'Start';

Catch : 'catch';

False : 'false';

Super : 'super';

Throw : 'throw';

Value : 'value';

While : 'while';

Fork : 'Fork';

Join : 'Join';

Stop : 'Stop';

Case : 'case';

Else : 'else';

Null : 'null';

Post : 'post';

Root : 'root';

Step : 'step';

True : 'true';

ExclamationMarkEqualsSignEqualsSign : '!==';

FullStopFullStopLessThanSign : '..<';

EqualsSignEqualsSignEqualsSign : '===';

CSM : 'CSM';

For : 'for';

New : 'new';

Pre : 'pre';

Try : 'try';

Val : 'val';

Var : 'var';

ExclamationMarkEqualsSign : '!=';

PercentSignEqualsSign : '%=';

AmpersandAmpersand : '&&';

AsteriskAsterisk : '**';

AsteriskEqualsSign : '*=';

PlusSignPlusSign : '++';

PlusSignEqualsSign : '+=';

HyphenMinusHyphenMinus : '--';

HyphenMinusEqualsSign : '-=';

HyphenMinusGreaterThanSign : '->';

FullStopFullStop : '..';

SolidusEqualsSign : '/=';

ColonColon : '::';

LessThanSignGreaterThanSign : '<>';

EqualsSignEqualsSign : '==';

EqualsSignGreaterThanSign : '=>';

GreaterThanSignEqualsSign : '>=';

QuestionMarkFullStop : '?.';

QuestionMarkColon : '?:';

As : 'as';

Do : 'do';

If : 'if';

VerticalLineVerticalLine : '||';

ExclamationMark : '!';

NumberSign : '#';

PercentSign : '%';

Ampersand : '&';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

QuestionMark : '?';

LeftSquareBracket : '[';

RightSquareBracket : ']';

LeftCurlyBracket : '{';

VerticalLine : '|';

RightCurlyBracket : '}';

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ('#' (('b'|'B') ('i'|'I')|('l'|'L')))?;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_DECIMAL : RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)? (('b'|'B') ('i'|'I'|'d'|'D')|('l'|'L'|'d'|'D'|'f'|'F'))?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'?|'\'' ('\\' .|~(('\\'|'\'')))* '\''?);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
