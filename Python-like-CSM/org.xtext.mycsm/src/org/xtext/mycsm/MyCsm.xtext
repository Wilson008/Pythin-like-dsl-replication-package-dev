// automatically generated by Xtext
// 1. change the reference from Terminals to Xbase grammar
//grammar org.xtext.mycsm.MyCsm with org.eclipse.xtext.common.Terminals
grammar org.xtext.mycsm.MyCsm with org.eclipse.xtext.xbase.Xbase

// 2. Import Xbase to refer to EClassifiers from the Xbase model
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://python-like/csm/primitivetype" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://python-like/csm"

CSM returns CSM:
	'CSM'
	BEGIN
		'step' BEGIN step+=Step ( "," step+=Step)* END 
		'generalResource' BEGIN generalResource+=GeneralResource ( "," generalResource+=GeneralResource)* END 
		'scenarion' BEGIN scenarion+=Scenarion ( "," scenarion+=Scenarion)* END 
		('message' BEGIN message+=Message ( "," message+=Message)* END )?
	END;

Step returns Step:
	Start | Stop | ResourceAcquire | ResourceRelease;

GeneralResource returns GeneralResource:
	Component | ProcessingResource | ExternalService;




PathConnection returns PathConnection:
	Join | Fork | Merge | Branch | Seqence;

ActiveResource returns ActiveResource:
	ProcessingResource | ExternalService;




Scenarion returns Scenarion:
	'Scenarion'
	BEGIN
		'root' '(' root+=[Start|EString] ( "," root+=[Start|EString])* ')' 
		'step' BEGIN step+=Step ( "," step+=Step)* END 
		('pathconnection' BEGIN pathconnection+=PathConnection ( "," pathconnection+=PathConnection)* END )?
	END;

Message returns Message:
	{Message}
	'Message'
	name=EString;

EString returns ecore::EString:
	STRING | ID;

Workload returns Workload:
	{Workload}
	'Workload'
	BEGIN
		('value' value=EInt)?
	END;

Start returns Start:
	{Start}
	'Start'
	name=EString
	BEGIN
		('postPath' postPath=[PathConnection|EString])?
		('prePath' prePath=[PathConnection|EString])?
		('activeResource' activeResource=[ActiveResource|EString])?
		('workload' BEGIN workload+=Workload ( "," workload+=Workload)* END )?
	END;

Stop returns Stop:
	{Stop}
	'Stop'
	name=EString
	BEGIN
		('postPath' postPath=[PathConnection|EString])?
		('prePath' prePath=[PathConnection|EString])?
		('activeResource' activeResource=[ActiveResource|EString])?
		('workload' BEGIN workload+=Workload ( "," workload+=Workload)* END )?
	END;

ResourceAcquire returns ResourceAcquire:
	{ResourceAcquire}
	'ResourceAcquire'
	name=EString
	BEGIN
		('postPath' postPath=[PathConnection|EString])?
		('prePath' prePath=[PathConnection|EString])?
		('activeResource' activeResource=[ActiveResource|EString])?
		('generalResource' generalResource=[GeneralResource|EString])?
		('workload' BEGIN workload+=Workload ( "," workload+=Workload)* END )?
	END;

ResourceRelease returns ResourceRelease:
	{ResourceRelease}
	'ResourceRelease'
	name=EString
	BEGIN
		('postPath' postPath=[PathConnection|EString])?
		('prePath' prePath=[PathConnection|EString])?
		('activeResource' activeResource=[ActiveResource|EString])?
		('generalResource' generalResource=[GeneralResource|EString])?
		('workload' BEGIN workload+=Workload ( "," workload+=Workload)* END )?
	END;

Join returns Join:
	{Join}
	'Join'
	name=EString
	BEGIN
		('message' message=[Message|EString])?
		('post' '(' post+=[Step|EString] ( "," post+=[Step|EString])* ')' )?
		('pre' '(' pre+=[Step|EString] ( "," pre+=[Step|EString])* ')' )?
	END;

Fork returns Fork:
	{Fork}
	'Fork'
	name=EString
	BEGIN
		('message' message=[Message|EString])?
		('post' '(' post+=[Step|EString] ( "," post+=[Step|EString])* ')' )?
		('pre' '(' pre+=[Step|EString] ( "," pre+=[Step|EString])* ')' )?
	END;

Merge returns Merge:
	{Merge}
	'Merge'
	name=EString
	BEGIN
		('message' message=[Message|EString])?
		('post' '(' post+=[Step|EString] ( "," post+=[Step|EString])* ')' )?
		('pre' '(' pre+=[Step|EString] ( "," pre+=[Step|EString])* ')' )?
	END;

Branch returns Branch:
	{Branch}
	'Branch'
	name=EString
	BEGIN
		('message' message=[Message|EString])?
		('post' '(' post+=[Step|EString] ( "," post+=[Step|EString])* ')' )?
		('pre' '(' pre+=[Step|EString] ( "," pre+=[Step|EString])* ')' )?
	END;

Seqence returns Seqence:
	{Seqence}
	'Seqence'
	name=EString
	BEGIN
		('message' message=[Message|EString])?
		('post' '(' post+=[Step|EString] ( "," post+=[Step|EString])* ')' )?
		('pre' '(' pre+=[Step|EString] ( "," pre+=[Step|EString])* ')' )?
	END;

ProcessingResource returns ProcessingResource:
	{ProcessingResource}
	'ProcessingResource'
	name=EString
	BEGIN
		('resourceAcquire' '(' resourceAcquire+=[ResourceAcquire|EString] ( "," resourceAcquire+=[ResourceAcquire|EString])* ')' )?
		('resourceRelease' '(' resourceRelease+=[ResourceRelease|EString] ( "," resourceRelease+=[ResourceRelease|EString])* ')' )?
		('step' '(' step+=[Step|EString] ( "," step+=[Step|EString])* ')' )?
	END;

ExternalService returns ExternalService:
	{ExternalService}
	'ExternalService'
	name=EString
	BEGIN
		('resourceAcquire' '(' resourceAcquire+=[ResourceAcquire|EString] ( "," resourceAcquire+=[ResourceAcquire|EString])* ')' )?
		('resourceRelease' '(' resourceRelease+=[ResourceRelease|EString] ( "," resourceRelease+=[ResourceRelease|EString])* ')' )?
		('step' '(' step+=[Step|EString] ( "," step+=[Step|EString])* ')' )?
	END;

EInt returns ecore::EInt:
	'-'? INT;

Component returns Component:
	{Component}
	'Component'
	name=EString
	BEGIN
		('resourceAcquire' '(' resourceAcquire+=[ResourceAcquire|EString] ( "," resourceAcquire+=[ResourceAcquire|EString])* ')' )?
		('resourceRelease' '(' resourceRelease+=[ResourceRelease|EString] ( "," resourceRelease+=[ResourceRelease|EString])* ')' )?
	END;
// 3. include whitespace-aware blocks in your language is to use synthetic tokens in the grammar 
//    by writing terminals of the form 'synthetic:<terminal name>'
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

// 4. inherits expressions from Xbase and redefines the syntax of block expressions
@Override
XBlockExpression returns xbase::XExpression:
    {xbase::XBlockExpression}
    BEGIN
        (expressions+=XExpressionOrVarDeclaration ';'?)*
    END;