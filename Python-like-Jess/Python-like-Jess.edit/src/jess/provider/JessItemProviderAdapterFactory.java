/**
 */
package jess.provider;

import java.util.ArrayList;
import java.util.Collection;

import jess.util.JessAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JessItemProviderAdapterFactory extends JessAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public JessItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.Root} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootItemProvider rootItemProvider;

	/**
	 * This creates an adapter for a {@link jess.Root}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootAdapter() {
		if (rootItemProvider == null) {
			rootItemProvider = new RootItemProvider(this);
		}

		return rootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.Integ} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegItemProvider integItemProvider;

	/**
	 * This creates an adapter for a {@link jess.Integ}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegAdapter() {
		if (integItemProvider == null) {
			integItemProvider = new IntegItemProvider(this);
		}

		return integItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.Floa} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloaItemProvider floaItemProvider;

	/**
	 * This creates an adapter for a {@link jess.Floa}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloaAdapter() {
		if (floaItemProvider == null) {
			floaItemProvider = new FloaItemProvider(this);
		}

		return floaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.Str} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrItemProvider strItemProvider;

	/**
	 * This creates an adapter for a {@link jess.Str}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrAdapter() {
		if (strItemProvider == null) {
			strItemProvider = new StrItemProvider(this);
		}

		return strItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.ValidIdentifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidIdentifierItemProvider validIdentifierItemProvider;

	/**
	 * This creates an adapter for a {@link jess.ValidIdentifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidIdentifierAdapter() {
		if (validIdentifierItemProvider == null) {
			validIdentifierItemProvider = new ValidIdentifierItemProvider(this);
		}

		return validIdentifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.SlotName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlotNameItemProvider slotNameItemProvider;

	/**
	 * This creates an adapter for a {@link jess.SlotName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlotNameAdapter() {
		if (slotNameItemProvider == null) {
			slotNameItemProvider = new SlotNameItemProvider(this);
		}

		return slotNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.JessVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JessVariableItemProvider jessVariableItemProvider;

	/**
	 * This creates an adapter for a {@link jess.JessVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJessVariableAdapter() {
		if (jessVariableItemProvider == null) {
			jessVariableItemProvider = new JessVariableItemProvider(this);
		}

		return jessVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.TemplateExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionItemProvider templateExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.TemplateExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionAdapter() {
		if (templateExpressionItemProvider == null) {
			templateExpressionItemProvider = new TemplateExpressionItemProvider(this);
		}

		return templateExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.SlotOp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlotOpItemProvider slotOpItemProvider;

	/**
	 * This creates an adapter for a {@link jess.SlotOp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlotOpAdapter() {
		if (slotOpItemProvider == null) {
			slotOpItemProvider = new SlotOpItemProvider(this);
		}

		return slotOpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.GlobalDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalDefinitionItemProvider globalDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.GlobalDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalDefinitionAdapter() {
		if (globalDefinitionItemProvider == null) {
			globalDefinitionItemProvider = new GlobalDefinitionItemProvider(this);
		}

		return globalDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.VarDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarDefinitionItemProvider varDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.VarDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarDefinitionAdapter() {
		if (varDefinitionItemProvider == null) {
			varDefinitionItemProvider = new VarDefinitionItemProvider(this);
		}

		return varDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.FunctionDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionDefinitionItemProvider functionDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.FunctionDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionDefinitionAdapter() {
		if (functionDefinitionItemProvider == null) {
			functionDefinitionItemProvider = new FunctionDefinitionItemProvider(this);
		}

		return functionDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.AdviceDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdviceDefinitionItemProvider adviceDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.AdviceDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdviceDefinitionAdapter() {
		if (adviceDefinitionItemProvider == null) {
			adviceDefinitionItemProvider = new AdviceDefinitionItemProvider(this);
		}

		return adviceDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.UnDefAdvice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnDefAdviceItemProvider unDefAdviceItemProvider;

	/**
	 * This creates an adapter for a {@link jess.UnDefAdvice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnDefAdviceAdapter() {
		if (unDefAdviceItemProvider == null) {
			unDefAdviceItemProvider = new UnDefAdviceItemProvider(this);
		}

		return unDefAdviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.FactDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactDefinitionItemProvider factDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.FactDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactDefinitionAdapter() {
		if (factDefinitionItemProvider == null) {
			factDefinitionItemProvider = new FactDefinitionItemProvider(this);
		}

		return factDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.RuleDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleDefinitionItemProvider ruleDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.RuleDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleDefinitionAdapter() {
		if (ruleDefinitionItemProvider == null) {
			ruleDefinitionItemProvider = new RuleDefinitionItemProvider(this);
		}

		return ruleDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.DeclareRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclareRuleItemProvider declareRuleItemProvider;

	/**
	 * This creates an adapter for a {@link jess.DeclareRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclareRuleAdapter() {
		if (declareRuleItemProvider == null) {
			declareRuleItemProvider = new DeclareRuleItemProvider(this);
		}

		return declareRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.ModuleDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleDefinitionItemProvider moduleDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.ModuleDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleDefinitionAdapter() {
		if (moduleDefinitionItemProvider == null) {
			moduleDefinitionItemProvider = new ModuleDefinitionItemProvider(this);
		}

		return moduleDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.QueryDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryDefinitionItemProvider queryDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.QueryDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryDefinitionAdapter() {
		if (queryDefinitionItemProvider == null) {
			queryDefinitionItemProvider = new QueryDefinitionItemProvider(this);
		}

		return queryDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.DeclareVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclareVarItemProvider declareVarItemProvider;

	/**
	 * This creates an adapter for a {@link jess.DeclareVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclareVarAdapter() {
		if (declareVarItemProvider == null) {
			declareVarItemProvider = new DeclareVarItemProvider(this);
		}

		return declareVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.TemplateDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateDefinitionItemProvider templateDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.TemplateDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateDefinitionAdapter() {
		if (templateDefinitionItemProvider == null) {
			templateDefinitionItemProvider = new TemplateDefinitionItemProvider(this);
		}

		return templateDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.DeclareBloc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclareBlocItemProvider declareBlocItemProvider;

	/**
	 * This creates an adapter for a {@link jess.DeclareBloc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclareBlocAdapter() {
		if (declareBlocItemProvider == null) {
			declareBlocItemProvider = new DeclareBlocItemProvider(this);
		}

		return declareBlocItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.ASlotDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ASlotDefItemProvider aSlotDefItemProvider;

	/**
	 * This creates an adapter for a {@link jess.ASlotDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createASlotDefAdapter() {
		if (aSlotDefItemProvider == null) {
			aSlotDefItemProvider = new ASlotDefItemProvider(this);
		}

		return aSlotDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.SlotDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlotDefItemProvider slotDefItemProvider;

	/**
	 * This creates an adapter for a {@link jess.SlotDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlotDefAdapter() {
		if (slotDefItemProvider == null) {
			slotDefItemProvider = new SlotDefItemProvider(this);
		}

		return slotDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.MultiSlotDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiSlotDefItemProvider multiSlotDefItemProvider;

	/**
	 * This creates an adapter for a {@link jess.MultiSlotDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiSlotDefAdapter() {
		if (multiSlotDefItemProvider == null) {
			multiSlotDefItemProvider = new MultiSlotDefItemProvider(this);
		}

		return multiSlotDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.SlotOptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlotOptionsItemProvider slotOptionsItemProvider;

	/**
	 * This creates an adapter for a {@link jess.SlotOptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlotOptionsAdapter() {
		if (slotOptionsItemProvider == null) {
			slotOptionsItemProvider = new SlotOptionsItemProvider(this);
		}

		return slotOptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.WhileExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileExpItemProvider whileExpItemProvider;

	/**
	 * This creates an adapter for a {@link jess.WhileExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileExpAdapter() {
		if (whileExpItemProvider == null) {
			whileExpItemProvider = new WhileExpItemProvider(this);
		}

		return whileExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.ForExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForExpItemProvider forExpItemProvider;

	/**
	 * This creates an adapter for a {@link jess.ForExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForExpAdapter() {
		if (forExpItemProvider == null) {
			forExpItemProvider = new ForExpItemProvider(this);
		}

		return forExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.ForeachExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForeachExpItemProvider foreachExpItemProvider;

	/**
	 * This creates an adapter for a {@link jess.ForeachExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForeachExpAdapter() {
		if (foreachExpItemProvider == null) {
			foreachExpItemProvider = new ForeachExpItemProvider(this);
		}

		return foreachExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.FuncCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuncCallItemProvider funcCallItemProvider;

	/**
	 * This creates an adapter for a {@link jess.FuncCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuncCallAdapter() {
		if (funcCallItemProvider == null) {
			funcCallItemProvider = new FuncCallItemProvider(this);
		}

		return funcCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.EngineExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EngineExpItemProvider engineExpItemProvider;

	/**
	 * This creates an adapter for a {@link jess.EngineExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEngineExpAdapter() {
		if (engineExpItemProvider == null) {
			engineExpItemProvider = new EngineExpItemProvider(this);
		}

		return engineExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.ExitExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExitExpItemProvider exitExpItemProvider;

	/**
	 * This creates an adapter for a {@link jess.ExitExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExitExpAdapter() {
		if (exitExpItemProvider == null) {
			exitExpItemProvider = new ExitExpItemProvider(this);
		}

		return exitExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.IfExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfExpressionItemProvider ifExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.IfExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfExpressionAdapter() {
		if (ifExpressionItemProvider == null) {
			ifExpressionItemProvider = new IfExpressionItemProvider(this);
		}

		return ifExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.ConditionAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionActionItemProvider conditionActionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.ConditionAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionActionAdapter() {
		if (conditionActionItemProvider == null) {
			conditionActionItemProvider = new ConditionActionItemProvider(this);
		}

		return conditionActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jess.ElifConditionAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElifConditionActionItemProvider elifConditionActionItemProvider;

	/**
	 * This creates an adapter for a {@link jess.ElifConditionAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElifConditionActionAdapter() {
		if (elifConditionActionItemProvider == null) {
			elifConditionActionItemProvider = new ElifConditionActionItemProvider(this);
		}

		return elifConditionActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (rootItemProvider != null) rootItemProvider.dispose();
		if (integItemProvider != null) integItemProvider.dispose();
		if (floaItemProvider != null) floaItemProvider.dispose();
		if (strItemProvider != null) strItemProvider.dispose();
		if (validIdentifierItemProvider != null) validIdentifierItemProvider.dispose();
		if (slotNameItemProvider != null) slotNameItemProvider.dispose();
		if (jessVariableItemProvider != null) jessVariableItemProvider.dispose();
		if (templateExpressionItemProvider != null) templateExpressionItemProvider.dispose();
		if (slotOpItemProvider != null) slotOpItemProvider.dispose();
		if (globalDefinitionItemProvider != null) globalDefinitionItemProvider.dispose();
		if (varDefinitionItemProvider != null) varDefinitionItemProvider.dispose();
		if (functionDefinitionItemProvider != null) functionDefinitionItemProvider.dispose();
		if (adviceDefinitionItemProvider != null) adviceDefinitionItemProvider.dispose();
		if (unDefAdviceItemProvider != null) unDefAdviceItemProvider.dispose();
		if (factDefinitionItemProvider != null) factDefinitionItemProvider.dispose();
		if (ruleDefinitionItemProvider != null) ruleDefinitionItemProvider.dispose();
		if (declareRuleItemProvider != null) declareRuleItemProvider.dispose();
		if (moduleDefinitionItemProvider != null) moduleDefinitionItemProvider.dispose();
		if (queryDefinitionItemProvider != null) queryDefinitionItemProvider.dispose();
		if (declareVarItemProvider != null) declareVarItemProvider.dispose();
		if (templateDefinitionItemProvider != null) templateDefinitionItemProvider.dispose();
		if (declareBlocItemProvider != null) declareBlocItemProvider.dispose();
		if (aSlotDefItemProvider != null) aSlotDefItemProvider.dispose();
		if (slotDefItemProvider != null) slotDefItemProvider.dispose();
		if (multiSlotDefItemProvider != null) multiSlotDefItemProvider.dispose();
		if (slotOptionsItemProvider != null) slotOptionsItemProvider.dispose();
		if (whileExpItemProvider != null) whileExpItemProvider.dispose();
		if (forExpItemProvider != null) forExpItemProvider.dispose();
		if (foreachExpItemProvider != null) foreachExpItemProvider.dispose();
		if (funcCallItemProvider != null) funcCallItemProvider.dispose();
		if (engineExpItemProvider != null) engineExpItemProvider.dispose();
		if (exitExpItemProvider != null) exitExpItemProvider.dispose();
		if (ifExpressionItemProvider != null) ifExpressionItemProvider.dispose();
		if (conditionActionItemProvider != null) conditionActionItemProvider.dispose();
		if (elifConditionActionItemProvider != null) elifConditionActionItemProvider.dispose();
	}

}
