/**
 * generated by Xtext 2.25.0
 */
package org.xtext.myjess.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import jess.Expression;
import jess.Root;
import jess.SlotOp;
import jess.TemplateExpression;
import jess.ValidIdentifier;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.myjess.services.MyJessGrammarAccess;

@SuppressWarnings("all")
public class MyJessFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyJessGrammarAccess _myJessGrammarAccess;
  
  protected void _format(final Root root, @Extension final IFormattableDocument document) {
    EList<Expression> _expressions = root.getExpressions();
    for (final Expression expression : _expressions) {
      document.<Expression>format(expression);
    }
  }
  
  protected void _format(final TemplateExpression templateExpression, @Extension final IFormattableDocument document) {
    document.<ValidIdentifier>format(templateExpression.getTemplateName());
    document.<SlotOp>format(templateExpression.getFirstSlot());
    EList<SlotOp> _slotOp = templateExpression.getSlotOp();
    for (final SlotOp slotOp : _slotOp) {
      document.<SlotOp>format(slotOp);
    }
  }
  
  public void format(final Object templateExpression, final IFormattableDocument document) {
    if (templateExpression instanceof TemplateExpression) {
      _format((TemplateExpression)templateExpression, document);
      return;
    } else if (templateExpression instanceof XtextResource) {
      _format((XtextResource)templateExpression, document);
      return;
    } else if (templateExpression instanceof Root) {
      _format((Root)templateExpression, document);
      return;
    } else if (templateExpression instanceof EObject) {
      _format((EObject)templateExpression, document);
      return;
    } else if (templateExpression == null) {
      _format((Void)null, document);
      return;
    } else if (templateExpression != null) {
      _format(templateExpression, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(templateExpression, document).toString());
    }
  }
}
