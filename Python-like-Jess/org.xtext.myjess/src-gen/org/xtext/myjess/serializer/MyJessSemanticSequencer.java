/*
 * generated by Xtext 2.25.0
 */
package org.xtext.myjess.serializer;

import com.google.inject.Inject;
import java.util.Set;
import jess.ASlotDef;
import jess.AdviceDefinition;
import jess.ConditionAction;
import jess.DeclareBloc;
import jess.DeclareRule;
import jess.DeclareVar;
import jess.ElifConditionAction;
import jess.EngineExp;
import jess.ExitExp;
import jess.FactDefinition;
import jess.Floa;
import jess.ForExp;
import jess.ForeachExp;
import jess.FuncCall;
import jess.FunctionDefinition;
import jess.GlobalDefinition;
import jess.IfExpression;
import jess.Integ;
import jess.JessPackage;
import jess.JessVariable;
import jess.ModuleDefinition;
import jess.MultiSlotDef;
import jess.QueryDefinition;
import jess.Root;
import jess.RuleDefinition;
import jess.SlotDef;
import jess.SlotName;
import jess.SlotOp;
import jess.SlotOptions;
import jess.Str;
import jess.TemplateDefinition;
import jess.TemplateExpression;
import jess.UnDefAdvice;
import jess.ValidIdentifier;
import jess.VarDefinition;
import jess.WhileExp;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;
import org.xtext.myjess.services.MyJessGrammarAccess;

@SuppressWarnings("all")
public class MyJessSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private MyJessGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JessPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JessPackage.ASLOT_DEF:
				sequence_ASlotDef_Impl(context, (ASlotDef) semanticObject); 
				return; 
			case JessPackage.ADVICE_DEFINITION:
				sequence_AdviceDefinition(context, (AdviceDefinition) semanticObject); 
				return; 
			case JessPackage.CONDITION_ACTION:
				sequence_ConditionAction(context, (ConditionAction) semanticObject); 
				return; 
			case JessPackage.DECLARE_BLOC:
				sequence_DeclareBloc(context, (DeclareBloc) semanticObject); 
				return; 
			case JessPackage.DECLARE_RULE:
				sequence_DeclareRule(context, (DeclareRule) semanticObject); 
				return; 
			case JessPackage.DECLARE_VAR:
				sequence_DeclareVar(context, (DeclareVar) semanticObject); 
				return; 
			case JessPackage.ELIF_CONDITION_ACTION:
				sequence_ElifConditionAction(context, (ElifConditionAction) semanticObject); 
				return; 
			case JessPackage.ENGINE_EXP:
				sequence_EngineExp(context, (EngineExp) semanticObject); 
				return; 
			case JessPackage.EXIT_EXP:
				sequence_ExitExp(context, (ExitExp) semanticObject); 
				return; 
			case JessPackage.FACT_DEFINITION:
				sequence_FactDefinition(context, (FactDefinition) semanticObject); 
				return; 
			case JessPackage.FLOA:
				sequence_Floa(context, (Floa) semanticObject); 
				return; 
			case JessPackage.FOR_EXP:
				sequence_ForExp(context, (ForExp) semanticObject); 
				return; 
			case JessPackage.FOREACH_EXP:
				sequence_ForeachExp(context, (ForeachExp) semanticObject); 
				return; 
			case JessPackage.FUNC_CALL:
				sequence_FuncCall(context, (FuncCall) semanticObject); 
				return; 
			case JessPackage.FUNCTION_DEFINITION:
				sequence_FunctionDefinition(context, (FunctionDefinition) semanticObject); 
				return; 
			case JessPackage.GLOBAL_DEFINITION:
				sequence_GlobalDefinition(context, (GlobalDefinition) semanticObject); 
				return; 
			case JessPackage.IF_EXPRESSION:
				sequence_IfExpression(context, (IfExpression) semanticObject); 
				return; 
			case JessPackage.INTEG:
				sequence_Integ(context, (Integ) semanticObject); 
				return; 
			case JessPackage.JESS_VARIABLE:
				sequence_JessVariable(context, (JessVariable) semanticObject); 
				return; 
			case JessPackage.MODULE_DEFINITION:
				sequence_ModuleDefinition(context, (ModuleDefinition) semanticObject); 
				return; 
			case JessPackage.MULTI_SLOT_DEF:
				sequence_MultiSlotDef(context, (MultiSlotDef) semanticObject); 
				return; 
			case JessPackage.QUERY_DEFINITION:
				sequence_QueryDefinition(context, (QueryDefinition) semanticObject); 
				return; 
			case JessPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			case JessPackage.RULE_DEFINITION:
				sequence_RuleDefinition(context, (RuleDefinition) semanticObject); 
				return; 
			case JessPackage.SLOT_DEF:
				sequence_SlotDef(context, (SlotDef) semanticObject); 
				return; 
			case JessPackage.SLOT_NAME:
				sequence_SlotName(context, (SlotName) semanticObject); 
				return; 
			case JessPackage.SLOT_OP:
				sequence_SlotOp(context, (SlotOp) semanticObject); 
				return; 
			case JessPackage.SLOT_OPTIONS:
				sequence_SlotOptions(context, (SlotOptions) semanticObject); 
				return; 
			case JessPackage.STR:
				sequence_Str(context, (Str) semanticObject); 
				return; 
			case JessPackage.TEMPLATE_DEFINITION:
				sequence_TemplateDefinition(context, (TemplateDefinition) semanticObject); 
				return; 
			case JessPackage.TEMPLATE_EXPRESSION:
				sequence_TemplateExpression(context, (TemplateExpression) semanticObject); 
				return; 
			case JessPackage.UN_DEF_ADVICE:
				sequence_UnDefAdvice(context, (UnDefAdvice) semanticObject); 
				return; 
			case JessPackage.VALID_IDENTIFIER:
				sequence_ValidIdentifier(context, (ValidIdentifier) semanticObject); 
				return; 
			case JessPackage.VAR_DEFINITION:
				sequence_VarDefinition(context, (VarDefinition) semanticObject); 
				return; 
			case JessPackage.WHILE_EXP:
				sequence_WhileExp(context, (WhileExp) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ASlotDef returns ASlotDef
	 *     ASlotDef_Impl returns ASlotDef
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         slotName=SlotName 
	 *         (optionals+=SlotOptions optionals+=SlotOptions*)?
	 *     )
	 */
	protected void sequence_ASlotDef_Impl(ISerializationContext context, ASlotDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns AdviceDefinition
	 *     AdviceDefinition returns AdviceDefinition
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         direction=Advice 
	 *         op=Ident 
	 *         (advice+=Expression advice+=Expression*)?
	 *     )
	 */
	protected void sequence_AdviceDefinition(ISerializationContext context, AdviceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConditionAction returns ConditionAction
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         condition=Expression 
	 *         (actions+=Expression actions+=Expression*)?
	 *     )
	 */
	protected void sequence_ConditionAction(ISerializationContext context, ConditionAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeclareBloc returns DeclareBloc
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         slotSpecific=ValidIdentifier? 
	 *         backchainReaction=ValidIdentifier? 
	 *         fromClass=ValidIdentifier? 
	 *         includeVariable=ValidIdentifier? 
	 *         order=ValidIdentifier?
	 *     )
	 */
	protected void sequence_DeclareBloc(ISerializationContext context, DeclareBloc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeclareRule returns DeclareRule
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         salience=Expression? 
	 *         nodeIndexHash=Expression? 
	 *         autoFocus=ValidIdentifier? 
	 *         noLoop=ValidIdentifier?
	 *     )
	 */
	protected void sequence_DeclareRule(ISerializationContext context, DeclareRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeclareVar returns DeclareVar
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         (var+=JessVariable var+=JessVariable*)? 
	 *         node=Expression 
	 *         max=Expression
	 *     )
	 */
	protected void sequence_DeclareVar(ISerializationContext context, DeclareVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElifConditionAction returns ElifConditionAction
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)? condAct=ConditionAction)
	 */
	protected void sequence_ElifConditionAction(ISerializationContext context, ElifConditionAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns EngineExp
	 *     UseFuncExp returns EngineExp
	 *     EngineExp returns EngineExp
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)?)
	 */
	protected void sequence_EngineExp(ISerializationContext context, EngineExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExitExp
	 *     UseFuncExp returns ExitExp
	 *     ExitExp returns ExitExp
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)?)
	 */
	protected void sequence_ExitExp(ISerializationContext context, ExitExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FactDefinition
	 *     FactDefinition returns FactDefinition
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         factName=ValidIdentifier 
	 *         documentation=Str? 
	 *         (fact+=Expression fact+=Expression*)?
	 *     )
	 */
	protected void sequence_FactDefinition(ISerializationContext context, FactDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Floa
	 *     Floa returns Floa
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)? val=Double)
	 */
	protected void sequence_Floa(ISerializationContext context, Floa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ForExp
	 *     UseFuncExp returns ForExp
	 *     ForExp returns ForExp
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         initializer=Expression 
	 *         condition=Expression 
	 *         increment=Expression 
	 *         (expressions+=Expression expressions+=Expression*)?
	 *     )
	 */
	protected void sequence_ForExp(ISerializationContext context, ForExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ForeachExp
	 *     UseFuncExp returns ForeachExp
	 *     ForeachExp returns ForeachExp
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         var=JessVariable 
	 *         list=Expression 
	 *         (expressions+=Expression expressions+=Expression*)?
	 *     )
	 */
	protected void sequence_ForeachExp(ISerializationContext context, ForeachExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FuncCall
	 *     UseFuncExp returns FuncCall
	 *     FuncCall returns FuncCall
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         funcName=ValidIdentifier 
	 *         (funcParam+=Expression funcParam+=Expression*)?
	 *     )
	 */
	protected void sequence_FuncCall(ISerializationContext context, FuncCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FunctionDefinition
	 *     FunctionDefinition returns FunctionDefinition
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         funcName=ValidIdentifier 
	 *         (parameters+=JessVariable parameters+=JessVariable*)? 
	 *         (expressions+=Expression expressions+=Expression*)?
	 *     )
	 */
	protected void sequence_FunctionDefinition(ISerializationContext context, FunctionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns GlobalDefinition
	 *     GlobalDefinition returns GlobalDefinition
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         (varDef+=VarDefinition varDef+=VarDefinition*)?
	 *     )
	 */
	protected void sequence_GlobalDefinition(ISerializationContext context, GlobalDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IfExpression
	 *     UseFuncExp returns IfExpression
	 *     IfExpression returns IfExpression
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         ifthen=ConditionAction 
	 *         (elifthen+=ElifConditionAction elifthen+=ElifConditionAction*)? 
	 *         (else+=Expression else+=Expression*)?
	 *     )
	 */
	protected void sequence_IfExpression(ISerializationContext context, IfExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Integ
	 *     Integ returns Integ
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)? val=Integer)
	 */
	protected void sequence_Integ(ISerializationContext context, Integ semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JessVariable
	 *     Ident returns JessVariable
	 *     JessVariable returns JessVariable
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)? val=String0)
	 */
	protected void sequence_JessVariable(ISerializationContext context, JessVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ModuleDefinition
	 *     ModuleDefinition returns ModuleDefinition
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         moduleName=ValidIdentifier 
	 *         documentation=Str?
	 *     )
	 */
	protected void sequence_ModuleDefinition(ISerializationContext context, ModuleDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ASlotDef returns MultiSlotDef
	 *     MultiSlotDef returns MultiSlotDef
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         slotName=SlotName 
	 *         (optionals+=SlotOptions optionals+=SlotOptions*)?
	 *     )
	 */
	protected void sequence_MultiSlotDef(ISerializationContext context, MultiSlotDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns QueryDefinition
	 *     QueryDefinition returns QueryDefinition
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         queryName=ValidIdentifier 
	 *         documentation=Str? 
	 *         declare=DeclareVar? 
	 *         (expressions+=Expression expressions+=Expression*)?
	 *     )
	 */
	protected void sequence_QueryDefinition(ISerializationContext context, QueryDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         (expressions+=Expression expressions+=Expression*)?
	 *     )
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns RuleDefinition
	 *     RuleDefinition returns RuleDefinition
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         ruleName=ValidIdentifier 
	 *         documentation=Str? 
	 *         declare=DeclareRule? 
	 *         (conditions+=Expression conditions+=Expression*)? 
	 *         (functionCall+=UseFuncExp functionCall+=UseFuncExp*)?
	 *     )
	 */
	protected void sequence_RuleDefinition(ISerializationContext context, RuleDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ASlotDef returns SlotDef
	 *     SlotDef returns SlotDef
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         slotName=SlotName 
	 *         (optionals+=SlotOptions optionals+=SlotOptions*)?
	 *     )
	 */
	protected void sequence_SlotDef(ISerializationContext context, SlotDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SlotName
	 *     Ident returns SlotName
	 *     SlotName returns SlotName
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)? val=String0)
	 */
	protected void sequence_SlotName(ISerializationContext context, SlotName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SlotOp returns SlotOp
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         slotIdent=SlotName 
	 *         operator=ValidIdentifier 
	 *         exp=Expression
	 *     )
	 */
	protected void sequence_SlotOp(ISerializationContext context, SlotOp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SlotOptions returns SlotOptions
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         type=ValidIdentifier 
	 *         def=Expression 
	 *         defaultDyn=Expression 
	 *         (allowedValues+=Expression allowedValues+=Expression*)?
	 *     )
	 */
	protected void sequence_SlotOptions(ISerializationContext context, SlotOptions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Str
	 *     Str returns Str
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)? val=String0)
	 */
	protected void sequence_Str(ISerializationContext context, Str semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns TemplateDefinition
	 *     TemplateDefinition returns TemplateDefinition
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         templateName=ValidIdentifier 
	 *         (inherits+=ValidIdentifier inherits+=ValidIdentifier*)? 
	 *         documentation=Str? 
	 *         declareBloc=DeclareBloc? 
	 *         (slotDef+=ASlotDef slotDef+=ASlotDef*)?
	 *     )
	 */
	protected void sequence_TemplateDefinition(ISerializationContext context, TemplateDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns TemplateExpression
	 *     TemplateExpression returns TemplateExpression
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         templateName=ValidIdentifier 
	 *         firstSlot=SlotOp 
	 *         (slotOp+=SlotOp slotOp+=SlotOp*)?
	 *     )
	 */
	protected void sequence_TemplateExpression(ISerializationContext context, TemplateExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns UnDefAdvice
	 *     UnDefAdvice returns UnDefAdvice
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)? op=Expression)
	 */
	protected void sequence_UnDefAdvice(ISerializationContext context, UnDefAdvice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ValidIdentifier
	 *     Ident returns ValidIdentifier
	 *     ValidIdentifier returns ValidIdentifier
	 *
	 * Constraint:
	 *     (location=String0? (commentsBefore+=String0 commentsBefore+=String0*)? (commentsAfter+=String0 commentsAfter+=String0*)? val=String0)
	 */
	protected void sequence_ValidIdentifier(ISerializationContext context, ValidIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDefinition returns VarDefinition
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         jessVar=JessVariable 
	 *         eq=ValidIdentifier 
	 *         expression=Expression
	 *     )
	 */
	protected void sequence_VarDefinition(ISerializationContext context, VarDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns WhileExp
	 *     UseFuncExp returns WhileExp
	 *     WhileExp returns WhileExp
	 *
	 * Constraint:
	 *     (
	 *         location=String0? 
	 *         (commentsBefore+=String0 commentsBefore+=String0*)? 
	 *         (commentsAfter+=String0 commentsAfter+=String0*)? 
	 *         hasDo=Boolean 
	 *         boolExp=Expression 
	 *         (actions+=Expression actions+=Expression*)?
	 *     )
	 */
	protected void sequence_WhileExp(ISerializationContext context, WhileExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XBlockExpression returns XBlockExpression
	 *     XExpression returns XBlockExpression
	 *     XAssignment returns XBlockExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns XBlockExpression
	 *     XOrExpression returns XBlockExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XAndExpression returns XBlockExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XEqualityExpression returns XBlockExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XRelationalExpression returns XBlockExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XBlockExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XBlockExpression
	 *     XOtherOperatorExpression returns XBlockExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XAdditiveExpression returns XBlockExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XMultiplicativeExpression returns XBlockExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XBlockExpression
	 *     XUnaryOperation returns XBlockExpression
	 *     XCastedExpression returns XBlockExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XBlockExpression
	 *     XPostfixOperation returns XBlockExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XBlockExpression
	 *     XMemberFeatureCall returns XBlockExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XBlockExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns XBlockExpression
	 *     XPrimaryExpression returns XBlockExpression
	 *     XParenthesizedExpression returns XBlockExpression
	 *     XExpressionOrVarDeclaration returns XBlockExpression
	 *
	 * Constraint:
	 *     expressions+=XExpressionOrVarDeclaration*
	 */
	protected void sequence_XBlockExpression(ISerializationContext context, XBlockExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
