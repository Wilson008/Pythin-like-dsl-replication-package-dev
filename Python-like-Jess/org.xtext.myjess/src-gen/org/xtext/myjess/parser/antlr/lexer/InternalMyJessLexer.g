/*
 * generated by Xtext 2.25.0
 */
lexer grammar InternalMyJessLexer;

@header {
package org.xtext.myjess.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

ElifConditionAction : 'ElifConditionAction';

FunctionDefinition : 'FunctionDefinition';

TemplateDefinition : 'TemplateDefinition';

TemplateExpression : 'TemplateExpression';

BackchainReaction : 'backchainReaction';

AdviceDefinition : 'AdviceDefinition';

GlobalDefinition : 'GlobalDefinition';

ModuleDefinition : 'ModuleDefinition';

ConditionAction : 'ConditionAction';

QueryDefinition : 'QueryDefinition';

IncludeVariable : 'includeVariable';

FactDefinition : 'FactDefinition';

RuleDefinition : 'RuleDefinition';

CommentsBefore : 'commentsBefore';

VarDefinition : 'VarDefinition';

AllowedValues : 'allowedValues';

CommentsAfter : 'commentsAfter';

NodeIndexHash : 'nodeIndexHash';

IfExpression : 'IfExpression';

JessVariable : 'JessVariable';

MultiSlotDef : 'MultiSlotDef';

SlotSpecific : 'slotSpecific';

Synchronized : 'synchronized';

TemplateName : 'templateName';

DeclareBloc : 'DeclareBloc';

DeclareRule : 'DeclareRule';

SlotOptions : 'SlotOptions';

UnDefAdvice : 'UnDefAdvice';

Expressions : 'expressions';

Initializer : 'initializer';

DeclareVar : 'DeclareVar';

ForeachExp : 'ForeachExp';

Conditions : 'conditions';

DefaultDyn : 'defaultDyn';

Instanceof : 'instanceof';

ModuleName : 'moduleName';

EngineExp : 'EngineExp';

AutoFocus : 'autoFocus';

Condition : 'condition';

Direction : 'direction';

Extension : 'extension';

FromClass : 'fromClass';

FuncParam : 'funcParam';

Increment : 'increment';

QueryName : 'queryName';

ASlotDef : 'ASlotDef';

FuncCall : 'FuncCall';

SlotName : 'SlotName';

WhileExp : 'WhileExp';

FactName : 'factName';

FuncName : 'funcName';

Inherits : 'inherits';

Location : 'location';

Operator : 'operator';

RuleName : 'ruleName';

Salience : 'salience';

SlotName_1 : 'slotName';

ExitExp : 'ExitExp';

SlotDef : 'SlotDef';

Actions : 'actions';

BoolExp : 'boolExp';

Default : 'default';

Extends : 'extends';

Finally : 'finally';

ForExp : 'ForExp';

SlotOp : 'SlotOp';

Advice : 'advice';

Before : 'before';

Import : 'import';

Return : 'return';

Static : 'static';

Switch : 'switch';

Typeof : 'typeof';

Integ : 'Integ';

After : 'after';

Catch : 'catch';

False : 'false';

HasDo : 'hasDo';

Order : 'order';

Super : 'super';

Throw : 'throw';

While : 'while';

Floa : 'Floa';

Root : 'Root';

Case : 'case';

Else : 'else';

Fact : 'fact';

List : 'list';

Node : 'node';

Null : 'null';

True : 'true';

Type : 'type';

ExclamationMarkEqualsSignEqualsSign : '!==';

FullStopFullStopLessThanSign : '..<';

EqualsSignEqualsSignEqualsSign : '===';

Str : 'Str';

Def : 'def';

Exp : 'exp';

For : 'for';

Max : 'max';

New : 'new';

Try : 'try';

Val : 'val';

Var : 'var';

ExclamationMarkEqualsSign : '!=';

PercentSignEqualsSign : '%=';

AmpersandAmpersand : '&&';

AsteriskAsterisk : '**';

AsteriskEqualsSign : '*=';

PlusSignPlusSign : '++';

PlusSignEqualsSign : '+=';

HyphenMinusHyphenMinus : '--';

HyphenMinusEqualsSign : '-=';

HyphenMinusGreaterThanSign : '->';

FullStopFullStop : '..';

SolidusEqualsSign : '/=';

ColonColon : '::';

LessThanSignGreaterThanSign : '<>';

EqualsSignEqualsSign : '==';

EqualsSignGreaterThanSign : '=>';

GreaterThanSignEqualsSign : '>=';

QuestionMarkFullStop : '?.';

QuestionMarkColon : '?:';

As : 'as';

Do : 'do';

Eq : 'eq';

If : 'if';

Op : 'op';

VerticalLineVerticalLine : '||';

ExclamationMark : '!';

NumberSign : '#';

PercentSign : '%';

Ampersand : '&';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

QuestionMark : '?';

LeftSquareBracket : '[';

RightSquareBracket : ']';

LeftCurlyBracket : '{';

VerticalLine : '|';

RightCurlyBracket : '}';

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ('#' (('b'|'B') ('i'|'I')|('l'|'L')))?;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_DECIMAL : RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)? (('b'|'B') ('i'|'I'|'d'|'D')|('l'|'L'|'d'|'D'|'f'|'F'))?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'?|'\'' ('\\' .|~(('\\'|'\'')))* '\''?);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
