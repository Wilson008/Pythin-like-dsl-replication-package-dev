// automatically generated by Xtext
grammar org.xtext.myjess.MyJess with org.eclipse.xtext.common.Terminals

import "http://python-like/jess/primitivetypes" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://python-like/jess" as jess

Root returns jess::Root:
	{jess::Root}
	'Root'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('expressions' '{' expressions+=Expression ( "," expressions+=Expression)* '}' )?
	'}';

Expression returns jess::Expression:
	Integ | Floa | Str | ValidIdentifier | SlotName | JessVariable | TemplateExpression | GlobalDefinition | FunctionDefinition | AdviceDefinition | UnDefAdvice | FactDefinition | RuleDefinition | ModuleDefinition | QueryDefinition | TemplateDefinition | WhileExp | ForExp | ForeachExp | FuncCall | EngineExp | ExitExp | IfExpression;





Ident returns jess::Ident:
	ValidIdentifier | SlotName | JessVariable;



UseFuncExp returns jess::UseFuncExp:
	WhileExp | ForExp | ForeachExp | FuncCall | EngineExp | ExitExp | IfExpression;



ASlotDef returns jess::ASlotDef:
	ASlotDef_Impl | SlotDef | MultiSlotDef;





String0 returns String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Integ returns jess::Integ:
	'Integ'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'val' val=Integer
	'}';

Floa returns jess::Floa:
	'Floa'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'val' val=Double
	'}';

Str returns jess::Str:
	'Str'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'val' val=String0
	'}';

ValidIdentifier returns jess::ValidIdentifier:
	'ValidIdentifier'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'val' val=String0
	'}';

SlotName returns jess::SlotName:
	'SlotName'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'val' val=String0
	'}';

JessVariable returns jess::JessVariable:
	'JessVariable'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'val' val=String0
	'}';

TemplateExpression returns jess::TemplateExpression:
	'TemplateExpression'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'templateName' templateName=ValidIdentifier
		'firstSlot' firstSlot=SlotOp
		('slotOp' '{' slotOp+=SlotOp ( "," slotOp+=SlotOp)* '}' )?
	'}';

GlobalDefinition returns jess::GlobalDefinition:
	{jess::GlobalDefinition}
	'GlobalDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('varDef' '{' varDef+=VarDefinition ( "," varDef+=VarDefinition)* '}' )?
	'}';

FunctionDefinition returns jess::FunctionDefinition:
	'FunctionDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'funcName' funcName=ValidIdentifier
		('parameters' '{' parameters+=JessVariable ( "," parameters+=JessVariable)* '}' )?
		('expressions' '{' expressions+=Expression ( "," expressions+=Expression)* '}' )?
	'}';

AdviceDefinition returns jess::AdviceDefinition:
	'AdviceDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'direction' direction=Advice
		'op' op=Ident
		('advice' '{' advice+=Expression ( "," advice+=Expression)* '}' )?
	'}';

UnDefAdvice returns jess::UnDefAdvice:
	'UnDefAdvice'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'op' op=Expression
	'}';

FactDefinition returns jess::FactDefinition:
	'FactDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'factName' factName=ValidIdentifier
		('documentation' documentation=Str)?
		('fact' '{' fact+=Expression ( "," fact+=Expression)* '}' )?
	'}';

RuleDefinition returns jess::RuleDefinition:
	'RuleDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'ruleName' ruleName=ValidIdentifier
		('documentation' documentation=Str)?
		('declare' declare=DeclareRule)?
		('conditions' '{' conditions+=Expression ( "," conditions+=Expression)* '}' )?
		('functionCall' '{' functionCall+=UseFuncExp ( "," functionCall+=UseFuncExp)* '}' )?
	'}';

ModuleDefinition returns jess::ModuleDefinition:
	'ModuleDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'moduleName' moduleName=ValidIdentifier
		('documentation' documentation=Str)?
	'}';

QueryDefinition returns jess::QueryDefinition:
	'QueryDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'queryName' queryName=ValidIdentifier
		('documentation' documentation=Str)?
		('declare' declare=DeclareVar)?
		('expressions' '{' expressions+=Expression ( "," expressions+=Expression)* '}' )?
	'}';

TemplateDefinition returns jess::TemplateDefinition:
	'TemplateDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'templateName' templateName=ValidIdentifier
		('inherits' '{' inherits+=ValidIdentifier ( "," inherits+=ValidIdentifier)* '}' )?
		('documentation' documentation=Str)?
		('declareBloc' declareBloc=DeclareBloc)?
		('slotDef' '{' slotDef+=ASlotDef ( "," slotDef+=ASlotDef)* '}' )?
	'}';

WhileExp returns jess::WhileExp:
	'WhileExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'hasDo' hasDo=Boolean
		'boolExp' boolExp=Expression
		('actions' '{' actions+=Expression ( "," actions+=Expression)* '}' )?
	'}';

ForExp returns jess::ForExp:
	'ForExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'initializer' initializer=Expression
		'condition' condition=Expression
		'increment' increment=Expression
		('expressions' '{' expressions+=Expression ( "," expressions+=Expression)* '}' )?
	'}';

ForeachExp returns jess::ForeachExp:
	'ForeachExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'var' var=JessVariable
		'list' list=Expression
		('expressions' '{' expressions+=Expression ( "," expressions+=Expression)* '}' )?
	'}';

FuncCall returns jess::FuncCall:
	'FuncCall'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'funcName' funcName=ValidIdentifier
		('funcParam' '{' funcParam+=Expression ( "," funcParam+=Expression)* '}' )?
	'}';

EngineExp returns jess::EngineExp:
	{jess::EngineExp}
	'EngineExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
	'}';

ExitExp returns jess::ExitExp:
	{jess::ExitExp}
	'ExitExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
	'}';

IfExpression returns jess::IfExpression:
	'IfExpression'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'ifthen' ifthen=ConditionAction
		('elifthen' '{' elifthen+=ElifConditionAction ( "," elifthen+=ElifConditionAction)* '}' )?
		('else' '{' else+=Expression ( "," else+=Expression)* '}' )?
	'}';

Integer returns Integer:
	'Integer' /* TODO: implement this rule and an appropriate IValueConverter */;

Double returns Double:
	'Double' /* TODO: implement this rule and an appropriate IValueConverter */;

SlotOp returns jess::SlotOp:
	'SlotOp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'slotIdent' slotIdent=SlotName
		'operator' operator=ValidIdentifier
		'exp' exp=Expression
	'}';

VarDefinition returns jess::VarDefinition:
	'VarDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'jessVar' jessVar=JessVariable
		'eq' eq=ValidIdentifier
		'expression' expression=Expression
	'}';

enum Advice returns jess::Advice:
				before = 'before' | after = 'after';

DeclareRule returns jess::DeclareRule:
	{jess::DeclareRule}
	'DeclareRule'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('salience' salience=Expression)?
		('nodeIndexHash' nodeIndexHash=Expression)?
		('autoFocus' autoFocus=ValidIdentifier)?
		('noLoop' noLoop=ValidIdentifier)?
	'}';

DeclareVar returns jess::DeclareVar:
	'DeclareVar'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('var' '{' var+=JessVariable ( "," var+=JessVariable)* '}' )?
		'node' node=Expression
		'max' max=Expression
	'}';

DeclareBloc returns jess::DeclareBloc:
	{jess::DeclareBloc}
	'DeclareBloc'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('slotSpecific' slotSpecific=ValidIdentifier)?
		('backchainReaction' backchainReaction=ValidIdentifier)?
		('fromClass' fromClass=ValidIdentifier)?
		('includeVariable' includeVariable=ValidIdentifier)?
		('order' order=ValidIdentifier)?
	'}';

ASlotDef_Impl returns jess::ASlotDef:
	'ASlotDef'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'slotName' slotName=SlotName
		('optionals' '{' optionals+=SlotOptions ( "," optionals+=SlotOptions)* '}' )?
	'}';

SlotOptions returns jess::SlotOptions:
	'SlotOptions'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'type' type=ValidIdentifier
		'def' def=Expression
		'defaultDyn' defaultDyn=Expression
		('allowedValues' '{' allowedValues+=Expression ( "," allowedValues+=Expression)* '}' )?
	'}';

SlotDef returns jess::SlotDef:
	'SlotDef'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'slotName' slotName=SlotName
		('optionals' '{' optionals+=SlotOptions ( "," optionals+=SlotOptions)* '}' )?
	'}';

MultiSlotDef returns jess::MultiSlotDef:
	'MultiSlotDef'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'slotName' slotName=SlotName
		('optionals' '{' optionals+=SlotOptions ( "," optionals+=SlotOptions)* '}' )?
	'}';

Boolean returns Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

ConditionAction returns jess::ConditionAction:
	'ConditionAction'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'condition' condition=Expression
		('actions' '{' actions+=Expression ( "," actions+=Expression)* '}' )?
	'}';

ElifConditionAction returns jess::ElifConditionAction:
	'ElifConditionAction'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'condAct' condAct=ConditionAction
	'}';
