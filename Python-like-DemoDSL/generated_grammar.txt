// automatically generated by Xtext
grammar org.xtext.demo.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "https://mdse/demodsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Root returns Root:
	{Root}
	'Root'
	'{'
		('hardwarecomponent' '{' hardwarecomponent+=HardwareComponent ( "," hardwarecomponent+=HardwareComponent)* '}' )?
		('softwarecomponent' '{' softwarecomponent+=SoftwareComponent ( "," softwarecomponent+=SoftwareComponent)* '}' )?
	'}';

HardwareComponent returns HardwareComponent:
	Node | Sensor | Actuator;


Port returns Port:
	PowerPort | FunctionPort;



Connector returns Connector:
	PortConnector | GroupConnector;

SoftwareComponent returns SoftwareComponent:
	{SoftwareComponent}
	'SoftwareComponent'
	'{'
		('identifier' identifier=EString)?
		('UUID' UUID=EString)?
		('allocatedTo' allocatedTo=[Node|EString])?
		('port' '{' port+=Port ( "," port+=Port)* '}' )?
		('portgroup' '{' portgroup+=PortGroup ( "," portgroup+=PortGroup)* '}' )?
		('connector' '{' connector+=Connector ( "," connector+=Connector)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Node returns Node:
	{Node}
	'Node'
	'{'
		('identifier' identifier=EString)?
		('UUID' UUID=EString)?
		('softwarecomponent' '{' softwarecomponent+=SoftwareComponent ( "," softwarecomponent+=SoftwareComponent)* '}' )?
	'}';

Sensor returns Sensor:
	{Sensor}
	'Sensor'
	'{'
		('identifier' identifier=EString)?
		('UUID' UUID=EString)?
	'}';

Actuator returns Actuator:
	{Actuator}
	'Actuator'
	'{'
		('identifier' identifier=EString)?
		('UUID' UUID=EString)?
	'}';

PortGroup returns PortGroup:
	'PortGroup'
	name=EString
	'{'
		'port' '{' port+=Port ( "," port+=Port)* '}' 
	'}';

PowerPort returns PowerPort:
	{PowerPort}
	'PowerPort'
	name=EString
	'{'
		('inputVoltage' inputVoltage=EInt)?
	'}';

FunctionPort returns FunctionPort:
	{FunctionPort}
	'FunctionPort'
	name=EString
	'{'
		('direction' direction=PortDirection)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

enum PortDirection returns PortDirection:
				in = 'in' | out = 'out' | inout = 'inout';

PortConnector returns PortConnector:
	'PortConnector'
	'{'
		'port' '{' port+=Port ( "," port+=Port)* '}' 
	'}';

GroupConnector returns GroupConnector:
	'GroupConnector'
	'{'
		'portgroup' '{' portgroup+=PortGroup ( "," portgroup+=PortGroup)* '}' 
	'}';
