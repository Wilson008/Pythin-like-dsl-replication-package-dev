// automatically generated by Xtext
// 1. change the reference from Terminals to Xbase grammar
//grammar org.xtext.demo.mydsl.MyDsl with org.eclipse.xtext.common.Terminals
grammar org.xtext.demo.mydsl.MyDsl with org.eclipse.xtext.xbase.Xbase

// 2. Import Xbase to refer to EClassifiers from the Xbase model
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "https://mdse/demodsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Root returns Root:
	{Root}
	'Root'
	BEGIN
		('hardwarecomponent' BEGIN hardwarecomponent+=HardwareComponent ( hardwarecomponent+=HardwareComponent)* END)?
		(softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
	END;

HardwareComponent returns HardwareComponent:
	Node | Sensor | Actuator ;


Port returns Port:
	PowerPort | FunctionPort ;



Connector returns Connector:
	PortConnector | GroupConnector;

SoftwareComponent returns SoftwareComponent:
	{SoftwareComponent}
	'softwarecomponent' (identifier=EString)?
	BEGIN
		('UUID' UUID=EString)?
		('allocatedTo' allocatedTo=[Node|EString])?
		(port+=Port (  port+=Port)*)?
		(portgroup+=PortGroup ( portgroup+=PortGroup)*)?
		(connector+=Connector ( connector+=Connector)*)?
	END;

EString returns ecore::EString:
	STRING | ID;

Node returns Node:
	{Node}
	'Node' identifier=EString
	BEGIN
		('UUID' UUID=EString)?
		(softwarecomponent+=SoftwareComponent ( softwarecomponent+=SoftwareComponent)*)?
	END;

Sensor returns Sensor:
	{Sensor}
	'Sensor' identifier=EString
	BEGIN
		('UUID' UUID=EString)?
	END;

Actuator returns Actuator:
	{Actuator}
	'Actuator' identifier=EString
	BEGIN
		
		('UUID' UUID=EString)?
	END;

PortGroup returns PortGroup:
	'PortGroup' name=EString
	BEGIN
		port+=Port ( port+=Port)*
	END;

PowerPort returns PowerPort:
	{PowerPort}
	'PowerPort' name=EString
	BEGIN
		('inputVoltage' inputVoltage=EInt)?
	END;

FunctionPort returns FunctionPort:
	{FunctionPort}
	'FunctionPort' name=EString
	BEGIN
		('direction' direction=PortDirection)?
	END;

EInt returns ecore::EInt:
	'-'? INT;

enum PortDirection returns PortDirection:
				in = 'in' | out = 'out' | inout = 'inout';

PortConnector returns PortConnector:
	'PortConnector'
	BEGIN
		port+=Port ( port+=Port)*
	END;

GroupConnector returns GroupConnector:
	'GroupConnector'
	BEGIN
		portgroup+=PortGroup (  portgroup+=PortGroup)*
	END;

// 3. include whitespace-aware blocks in your language is to use synthetic tokens in the grammar 
//    by writing terminals of the form 'synthetic:<terminal name>'
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

// 4. inherits expressions from Xbase and redefines the syntax of block expressions
@Override
XBlockExpression returns xbase::XExpression:
    {xbase::XBlockExpression}
    BEGIN
        (expressions+=XExpressionOrVarDeclaration ';'?)*
    END;
